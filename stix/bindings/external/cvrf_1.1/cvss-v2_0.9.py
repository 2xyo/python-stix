#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Apr 11 15:08:05 2013 by generateDS.py version 2.9a.
#

import sys
import getopt
import re as re_

import base64
from datetime import datetime, tzinfo, timedelta

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError(
                        "Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(tzinfo):
            def __init__(self, offset, name):
                self.__offset = timedelta(minutes = offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return input_data
        def gds_validate_datetime(self, input_data, node, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = input_data.strftime('%Y-%m-%dT%H:%M:%S')
            else:
                _svalue = input_data.strftime('%Y-%m-%dT%H:%M:%S.%f')
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_parse_datetime(self, input_data, node, input_name=''):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'GMT')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime.strptime(
                        input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime.strptime(
                        input_data, '%Y-%m-%dT%H:%M:%S')
            return dt.replace(tzinfo = tz)

        def gds_validate_date(self, input_data, node, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = input_data.strftime('%Y-%m-%d')
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_parse_date(self, input_data, node, input_name=''):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'GMT')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            return datetime.strptime(input_data,
                '%Y-%m-%d').replace(tzinfo = tz)
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (
            msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' %
                (self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n'
                % (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n'
                % (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class accessComplexityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, approximated=False, valueOf_=None):
        self.approximated = _cast(bool, approximated)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if accessComplexityType.subclass:
            return accessComplexityType.subclass(*args_, **kwargs_)
        else:
            return accessComplexityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_approximated(self): return self.approximated
    def set_approximated(self, approximated): self.approximated = approximated
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='accessComplexityType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='accessComplexityType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='accessComplexityType'):
        if self.approximated is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            outfile.write(' approximated="%s"' % self.gds_format_boolean(self.approximated, input_name='approximated'))
    def exportChildren(self, outfile, level, namespace_='', name_='accessComplexityType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='accessComplexityType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.approximated is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            showIndent(outfile, level)
            outfile.write('approximated = %s,\n' % (self.approximated,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('approximated', node)
        if value is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            if value in ('true', '1'):
                self.approximated = True
            elif value in ('false', '0'):
                self.approximated = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class accessComplexityType

class accessVectorType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, approximated=False, valueOf_=None):
        self.approximated = _cast(bool, approximated)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if accessVectorType.subclass:
            return accessVectorType.subclass(*args_, **kwargs_)
        else:
            return accessVectorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_approximated(self): return self.approximated
    def set_approximated(self, approximated): self.approximated = approximated
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='accessVectorType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='accessVectorType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='accessVectorType'):
        if self.approximated is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            outfile.write(' approximated="%s"' % self.gds_format_boolean(self.approximated, input_name='approximated'))
    def exportChildren(self, outfile, level, namespace_='', name_='accessVectorType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='accessVectorType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.approximated is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            showIndent(outfile, level)
            outfile.write('approximated = %s,\n' % (self.approximated,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('approximated', node)
        if value is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            if value in ('true', '1'):
                self.approximated = True
            elif value in ('false', '0'):
                self.approximated = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class accessVectorType

class ciaRequirementType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, approximated=False, valueOf_=None):
        self.approximated = _cast(bool, approximated)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if ciaRequirementType.subclass:
            return ciaRequirementType.subclass(*args_, **kwargs_)
        else:
            return ciaRequirementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_approximated(self): return self.approximated
    def set_approximated(self, approximated): self.approximated = approximated
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ciaRequirementType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ciaRequirementType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ciaRequirementType'):
        if self.approximated is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            outfile.write(' approximated="%s"' % self.gds_format_boolean(self.approximated, input_name='approximated'))
    def exportChildren(self, outfile, level, namespace_='', name_='ciaRequirementType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='ciaRequirementType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.approximated is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            showIndent(outfile, level)
            outfile.write('approximated = %s,\n' % (self.approximated,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('approximated', node)
        if value is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            if value in ('true', '1'):
                self.approximated = True
            elif value in ('false', '0'):
                self.approximated = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ciaRequirementType

class collateralDamagePotentialType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, approximated=False, valueOf_=None):
        self.approximated = _cast(bool, approximated)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if collateralDamagePotentialType.subclass:
            return collateralDamagePotentialType.subclass(*args_, **kwargs_)
        else:
            return collateralDamagePotentialType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_approximated(self): return self.approximated
    def set_approximated(self, approximated): self.approximated = approximated
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='collateralDamagePotentialType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='collateralDamagePotentialType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='collateralDamagePotentialType'):
        if self.approximated is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            outfile.write(' approximated="%s"' % self.gds_format_boolean(self.approximated, input_name='approximated'))
    def exportChildren(self, outfile, level, namespace_='', name_='collateralDamagePotentialType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='collateralDamagePotentialType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.approximated is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            showIndent(outfile, level)
            outfile.write('approximated = %s,\n' % (self.approximated,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('approximated', node)
        if value is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            if value in ('true', '1'):
                self.approximated = True
            elif value in ('false', '0'):
                self.approximated = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class collateralDamagePotentialType

class targetDistributionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, approximated=False, valueOf_=None):
        self.approximated = _cast(bool, approximated)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if targetDistributionType.subclass:
            return targetDistributionType.subclass(*args_, **kwargs_)
        else:
            return targetDistributionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_approximated(self): return self.approximated
    def set_approximated(self, approximated): self.approximated = approximated
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='targetDistributionType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='targetDistributionType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='targetDistributionType'):
        if self.approximated is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            outfile.write(' approximated="%s"' % self.gds_format_boolean(self.approximated, input_name='approximated'))
    def exportChildren(self, outfile, level, namespace_='', name_='targetDistributionType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='targetDistributionType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.approximated is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            showIndent(outfile, level)
            outfile.write('approximated = %s,\n' % (self.approximated,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('approximated', node)
        if value is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            if value in ('true', '1'):
                self.approximated = True
            elif value in ('false', '0'):
                self.approximated = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class targetDistributionType

class ciaType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, approximated=False, valueOf_=None):
        self.approximated = _cast(bool, approximated)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if ciaType.subclass:
            return ciaType.subclass(*args_, **kwargs_)
        else:
            return ciaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_approximated(self): return self.approximated
    def set_approximated(self, approximated): self.approximated = approximated
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ciaType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ciaType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ciaType'):
        if self.approximated is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            outfile.write(' approximated="%s"' % self.gds_format_boolean(self.approximated, input_name='approximated'))
    def exportChildren(self, outfile, level, namespace_='', name_='ciaType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='ciaType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.approximated is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            showIndent(outfile, level)
            outfile.write('approximated = %s,\n' % (self.approximated,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('approximated', node)
        if value is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            if value in ('true', '1'):
                self.approximated = True
            elif value in ('false', '0'):
                self.approximated = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ciaType

class authenticationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, approximated=False, valueOf_=None):
        self.approximated = _cast(bool, approximated)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if authenticationType.subclass:
            return authenticationType.subclass(*args_, **kwargs_)
        else:
            return authenticationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_approximated(self): return self.approximated
    def set_approximated(self, approximated): self.approximated = approximated
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='authenticationType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='authenticationType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='authenticationType'):
        if self.approximated is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            outfile.write(' approximated="%s"' % self.gds_format_boolean(self.approximated, input_name='approximated'))
    def exportChildren(self, outfile, level, namespace_='', name_='authenticationType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='authenticationType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.approximated is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            showIndent(outfile, level)
            outfile.write('approximated = %s,\n' % (self.approximated,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('approximated', node)
        if value is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            if value in ('true', '1'):
                self.approximated = True
            elif value in ('false', '0'):
                self.approximated = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class authenticationType

class remediationLevelType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, approximated=False, valueOf_=None):
        self.approximated = _cast(bool, approximated)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if remediationLevelType.subclass:
            return remediationLevelType.subclass(*args_, **kwargs_)
        else:
            return remediationLevelType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_approximated(self): return self.approximated
    def set_approximated(self, approximated): self.approximated = approximated
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='remediationLevelType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='remediationLevelType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='remediationLevelType'):
        if self.approximated is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            outfile.write(' approximated="%s"' % self.gds_format_boolean(self.approximated, input_name='approximated'))
    def exportChildren(self, outfile, level, namespace_='', name_='remediationLevelType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='remediationLevelType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.approximated is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            showIndent(outfile, level)
            outfile.write('approximated = %s,\n' % (self.approximated,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('approximated', node)
        if value is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            if value in ('true', '1'):
                self.approximated = True
            elif value in ('false', '0'):
                self.approximated = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class remediationLevelType

class confidenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, approximated=False, valueOf_=None):
        self.approximated = _cast(bool, approximated)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if confidenceType.subclass:
            return confidenceType.subclass(*args_, **kwargs_)
        else:
            return confidenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_approximated(self): return self.approximated
    def set_approximated(self, approximated): self.approximated = approximated
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='confidenceType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='confidenceType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='confidenceType'):
        if self.approximated is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            outfile.write(' approximated="%s"' % self.gds_format_boolean(self.approximated, input_name='approximated'))
    def exportChildren(self, outfile, level, namespace_='', name_='confidenceType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='confidenceType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.approximated is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            showIndent(outfile, level)
            outfile.write('approximated = %s,\n' % (self.approximated,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('approximated', node)
        if value is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            if value in ('true', '1'):
                self.approximated = True
            elif value in ('false', '0'):
                self.approximated = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class confidenceType

class exploitabilityType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, approximated=False, valueOf_=None):
        self.approximated = _cast(bool, approximated)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if exploitabilityType.subclass:
            return exploitabilityType.subclass(*args_, **kwargs_)
        else:
            return exploitabilityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_approximated(self): return self.approximated
    def set_approximated(self, approximated): self.approximated = approximated
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='exploitabilityType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='exploitabilityType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='exploitabilityType'):
        if self.approximated is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            outfile.write(' approximated="%s"' % self.gds_format_boolean(self.approximated, input_name='approximated'))
    def exportChildren(self, outfile, level, namespace_='', name_='exploitabilityType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='exploitabilityType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.approximated is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            showIndent(outfile, level)
            outfile.write('approximated = %s,\n' % (self.approximated,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('approximated', node)
        if value is not None and 'approximated' not in already_processed:
            already_processed.add('approximated')
            if value in ('true', '1'):
                self.approximated = True
            elif value in ('false', '0'):
                self.approximated = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class exploitabilityType

class cvssType(GeneratedsSuper):
    """ "This schema was intentionally designed to avoid mixing classes and
    attributes between CVSS version 1, CVSS version 2, and future
    versions. Scores in the CVSS system are interdependent. The
    temporal score is a multiplier of the base score. The
    environmental score, in turn, is a multiplier of the temporal
    score. The ability to transfer these scores independently is
    provided on the assumption that the user understands the
    business logic. For any given metric, it is preferred that the
    score, as a minimum is provided, however the score can be re-
    created from the metrics or the multiplier and any scores they
    are dependent on." """
    subclass = None
    superclass = None
    def __init__(self, base_metrics=None, environmental_metrics=None, temporal_metrics=None):
        if base_metrics is None:
            self.base_metrics = []
        else:
            self.base_metrics = base_metrics
        if environmental_metrics is None:
            self.environmental_metrics = []
        else:
            self.environmental_metrics = environmental_metrics
        if temporal_metrics is None:
            self.temporal_metrics = []
        else:
            self.temporal_metrics = temporal_metrics
    def factory(*args_, **kwargs_):
        if cvssType.subclass:
            return cvssType.subclass(*args_, **kwargs_)
        else:
            return cvssType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_base_metrics(self): return self.base_metrics
    def set_base_metrics(self, base_metrics): self.base_metrics = base_metrics
    def add_base_metrics(self, value): self.base_metrics.append(value)
    def insert_base_metrics(self, index, value): self.base_metrics[index] = value
    def get_environmental_metrics(self): return self.environmental_metrics
    def set_environmental_metrics(self, environmental_metrics): self.environmental_metrics = environmental_metrics
    def add_environmental_metrics(self, value): self.environmental_metrics.append(value)
    def insert_environmental_metrics(self, index, value): self.environmental_metrics[index] = value
    def get_temporal_metrics(self): return self.temporal_metrics
    def set_temporal_metrics(self, temporal_metrics): self.temporal_metrics = temporal_metrics
    def add_temporal_metrics(self, value): self.temporal_metrics.append(value)
    def insert_temporal_metrics(self, index, value): self.temporal_metrics[index] = value
    def hasContent_(self):
        if (
            self.base_metrics or
            self.environmental_metrics or
            self.temporal_metrics
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='cvssType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cvssType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='cvssType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='cvssType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for base_metrics_ in self.base_metrics:
            base_metrics_.export(outfile, level, '', name_='base_metrics', pretty_print=pretty_print)
        for environmental_metrics_ in self.environmental_metrics:
            environmental_metrics_.export(outfile, level, '', name_='environmental_metrics', pretty_print=pretty_print)
        for temporal_metrics_ in self.temporal_metrics:
            temporal_metrics_.export(outfile, level, '', name_='temporal_metrics', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='cvssType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('base_metrics=[\n')
        level += 1
        for base_metrics_ in self.base_metrics:
            outfile.write('model_.baseMetricsType(\n')
            base_metrics_.exportLiteral(outfile, level, name_='baseMetricsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('environmental_metrics=[\n')
        level += 1
        for environmental_metrics_ in self.environmental_metrics:
            outfile.write('model_.environmentalMetricsType(\n')
            environmental_metrics_.exportLiteral(outfile, level, name_='environmentalMetricsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('temporal_metrics=[\n')
        level += 1
        for temporal_metrics_ in self.temporal_metrics:
            outfile.write('model_.temporalMetricsType(\n')
            temporal_metrics_.exportLiteral(outfile, level, name_='temporalMetricsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'base_metrics':
            obj_ = baseMetricsType.factory()
            obj_.build(child_)
            self.base_metrics.append(obj_)
        elif nodeName_ == 'environmental_metrics':
            obj_ = environmentalMetricsType.factory()
            obj_.build(child_)
            self.environmental_metrics.append(obj_)
        elif nodeName_ == 'temporal_metrics':
            obj_ = temporalMetricsType.factory()
            obj_.build(child_)
            self.temporal_metrics.append(obj_)
# end class cvssType

class cvssImpactType(cvssType):
    subclass = None
    superclass = cvssType
    def __init__(self, base_metrics=None, environmental_metrics=None, temporal_metrics=None):
        super(cvssImpactType, self).__init__(base_metrics, environmental_metrics, temporal_metrics, )
        self.base_metrics = base_metrics
        self.environmental_metrics = environmental_metrics
        self.temporal_metrics = temporal_metrics
    def factory(*args_, **kwargs_):
        if cvssImpactType.subclass:
            return cvssImpactType.subclass(*args_, **kwargs_)
        else:
            return cvssImpactType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_base_metrics(self): return self.base_metrics
    def set_base_metrics(self, base_metrics): self.base_metrics = base_metrics
    def get_environmental_metrics(self): return self.environmental_metrics
    def set_environmental_metrics(self, environmental_metrics): self.environmental_metrics = environmental_metrics
    def get_temporal_metrics(self): return self.temporal_metrics
    def set_temporal_metrics(self, temporal_metrics): self.temporal_metrics = temporal_metrics
    def hasContent_(self):
        if (
            self.base_metrics is not None or
            self.environmental_metrics is not None or
            self.temporal_metrics is not None or
            super(cvssImpactType, self).hasContent_()
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='cvssImpactType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cvssImpactType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='cvssImpactType'):
        super(cvssImpactType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='cvssImpactType')
    def exportChildren(self, outfile, level, namespace_='', name_='cvssImpactType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.base_metrics is not None:
            self.base_metrics.export(outfile, level, '', name_='base_metrics', pretty_print=pretty_print)
        if self.environmental_metrics is not None:
            self.environmental_metrics.export(outfile, level, '', name_='environmental_metrics', pretty_print=pretty_print)
        if self.temporal_metrics is not None:
            self.temporal_metrics.export(outfile, level, '', name_='temporal_metrics', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='cvssImpactType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(cvssImpactType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(cvssImpactType, self).exportLiteralChildren(outfile, level, name_)
        if self.base_metrics is not None:
            outfile.write('base_metrics=model_.baseMetricsType(\n')
            self.base_metrics.exportLiteral(outfile, level, name_='base_metrics')
            outfile.write('),\n')
        if self.environmental_metrics is not None:
            outfile.write('environmental_metrics=model_.environmentalMetricsType(\n')
            self.environmental_metrics.exportLiteral(outfile, level, name_='environmental_metrics')
            outfile.write('),\n')
        if self.temporal_metrics is not None:
            outfile.write('temporal_metrics=model_.temporalMetricsType(\n')
            self.temporal_metrics.exportLiteral(outfile, level, name_='temporal_metrics')
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        super(cvssImpactType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'base_metrics':
            obj_ = baseMetricsType.factory()
            obj_.build(child_)
            self.set_base_metrics(obj_)
        elif nodeName_ == 'environmental_metrics':
            obj_ = environmentalMetricsType.factory()
            obj_.build(child_)
            self.set_environmental_metrics(obj_)
        elif nodeName_ == 'temporal_metrics':
            obj_ = temporalMetricsType.factory()
            obj_.build(child_)
            self.set_temporal_metrics(obj_)
# end class cvssImpactType

class cvssImpactBaseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, base_metrics=None, extensiontype_=None):
        self.base_metrics = base_metrics
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if cvssImpactBaseType.subclass:
            return cvssImpactBaseType.subclass(*args_, **kwargs_)
        else:
            return cvssImpactBaseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_base_metrics(self): return self.base_metrics
    def set_base_metrics(self, base_metrics): self.base_metrics = base_metrics
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            self.base_metrics is not None
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='cvssImpactBaseType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cvssImpactBaseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='cvssImpactBaseType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='cvssImpactBaseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.base_metrics is not None:
            self.base_metrics.export(outfile, level, '', name_='base_metrics', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='cvssImpactBaseType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.base_metrics is not None:
            outfile.write('base_metrics=model_.baseMetricsType(\n')
            self.base_metrics.exportLiteral(outfile, level, name_='base_metrics')
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'base_metrics':
            obj_ = baseMetricsType.factory()
            obj_.build(child_)
            self.set_base_metrics(obj_)
# end class cvssImpactBaseType

class cvssImpactTemporalType(cvssImpactBaseType):
    subclass = None
    superclass = cvssImpactBaseType
    def __init__(self, base_metrics=None, temporal_metrics=None, extensiontype_=None):
        super(cvssImpactTemporalType, self).__init__(base_metrics, extensiontype_, )
        self.temporal_metrics = temporal_metrics
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if cvssImpactTemporalType.subclass:
            return cvssImpactTemporalType.subclass(*args_, **kwargs_)
        else:
            return cvssImpactTemporalType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_temporal_metrics(self): return self.temporal_metrics
    def set_temporal_metrics(self, temporal_metrics): self.temporal_metrics = temporal_metrics
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            self.temporal_metrics is not None or
            super(cvssImpactTemporalType, self).hasContent_()
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='cvssImpactTemporalType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cvssImpactTemporalType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='cvssImpactTemporalType'):
        super(cvssImpactTemporalType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='cvssImpactTemporalType')
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='', name_='cvssImpactTemporalType', fromsubclass_=False, pretty_print=True):
        super(cvssImpactTemporalType, self).exportChildren(outfile, level, '', name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.temporal_metrics is not None:
            self.temporal_metrics.export(outfile, level, '', name_='temporal_metrics', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='cvssImpactTemporalType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(cvssImpactTemporalType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(cvssImpactTemporalType, self).exportLiteralChildren(outfile, level, name_)
        if self.temporal_metrics is not None:
            outfile.write('temporal_metrics=model_.temporalMetricsType(\n')
            self.temporal_metrics.exportLiteral(outfile, level, name_='temporal_metrics')
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(cvssImpactTemporalType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'temporal_metrics':
            obj_ = temporalMetricsType.factory()
            obj_.build(child_)
            self.set_temporal_metrics(obj_)
        super(cvssImpactTemporalType, self).buildChildren(child_, node, nodeName_, True)
# end class cvssImpactTemporalType

class cvssImpactEnvironmentalType(cvssImpactTemporalType):
    subclass = None
    superclass = cvssImpactTemporalType
    def __init__(self, base_metrics=None, temporal_metrics=None, environmental_metrics=None):
        super(cvssImpactEnvironmentalType, self).__init__(base_metrics, temporal_metrics, )
        self.environmental_metrics = environmental_metrics
    def factory(*args_, **kwargs_):
        if cvssImpactEnvironmentalType.subclass:
            return cvssImpactEnvironmentalType.subclass(*args_, **kwargs_)
        else:
            return cvssImpactEnvironmentalType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_environmental_metrics(self): return self.environmental_metrics
    def set_environmental_metrics(self, environmental_metrics): self.environmental_metrics = environmental_metrics
    def hasContent_(self):
        if (
            self.environmental_metrics is not None or
            super(cvssImpactEnvironmentalType, self).hasContent_()
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='cvssImpactEnvironmentalType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cvssImpactEnvironmentalType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='cvssImpactEnvironmentalType'):
        super(cvssImpactEnvironmentalType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='cvssImpactEnvironmentalType')
    def exportChildren(self, outfile, level, namespace_='', name_='cvssImpactEnvironmentalType', fromsubclass_=False, pretty_print=True):
        super(cvssImpactEnvironmentalType, self).exportChildren(outfile, level, '', name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.environmental_metrics is not None:
            self.environmental_metrics.export(outfile, level, '', name_='environmental_metrics', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='cvssImpactEnvironmentalType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(cvssImpactEnvironmentalType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(cvssImpactEnvironmentalType, self).exportLiteralChildren(outfile, level, name_)
        if self.environmental_metrics is not None:
            outfile.write('environmental_metrics=model_.environmentalMetricsType(\n')
            self.environmental_metrics.exportLiteral(outfile, level, name_='environmental_metrics')
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        super(cvssImpactEnvironmentalType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'environmental_metrics':
            obj_ = environmentalMetricsType.factory()
            obj_.build(child_)
            self.set_environmental_metrics(obj_)
        super(cvssImpactEnvironmentalType, self).buildChildren(child_, node, nodeName_, True)
# end class cvssImpactEnvironmentalType

class metricsType(GeneratedsSuper):
    """Base type for metrics that defines common attributes of all
    metrics.Indicates if the metrics have been upgraded from a
    previous version of CVSS. If fields that were approximated will
    have an approximated attribute set to 'true'."""
    subclass = None
    superclass = None
    def __init__(self, upgraded_from_version=None, extensiontype_=None):
        self.upgraded_from_version = _cast(float, upgraded_from_version)
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if metricsType.subclass:
            return metricsType.subclass(*args_, **kwargs_)
        else:
            return metricsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_upgraded_from_version(self): return self.upgraded_from_version
    def set_upgraded_from_version(self, upgraded_from_version): self.upgraded_from_version = upgraded_from_version
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='metricsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='metricsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='metricsType'):
        if self.upgraded_from_version is not None and 'upgraded_from_version' not in already_processed:
            already_processed.add('upgraded_from_version')
            outfile.write(' upgraded-from-version="%s"' % self.gds_format_float(self.upgraded_from_version, input_name='upgraded-from-version'))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='', name_='metricsType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='metricsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.upgraded_from_version is not None and 'upgraded_from_version' not in already_processed:
            already_processed.add('upgraded_from_version')
            showIndent(outfile, level)
            outfile.write('upgraded_from_version = %f,\n' % (self.upgraded_from_version,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('upgraded-from-version', node)
        if value is not None and 'upgraded-from-version' not in already_processed:
            already_processed.add('upgraded-from-version')
            try:
                self.upgraded_from_version = float(value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (upgraded-from-version): %s' % exp)
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class metricsType

class baseMetricsType(metricsType):
    subclass = None
    superclass = metricsType
    def __init__(self, upgraded_from_version=None, score=None, exploit_subscore=None, impact_subscore=None, access_vector=None, access_complexity=None, authentication=None, confidentiality_impact=None, integrity_impact=None, availability_impact=None, source=None, generated_on_datetime=None):
        super(baseMetricsType, self).__init__(upgraded_from_version, )
        self.score = score
        self.exploit_subscore = exploit_subscore
        self.impact_subscore = impact_subscore
        self.access_vector = access_vector
        self.access_complexity = access_complexity
        self.authentication = authentication
        self.confidentiality_impact = confidentiality_impact
        self.integrity_impact = integrity_impact
        self.availability_impact = availability_impact
        self.source = source
        self.generated_on_datetime = generated_on_datetime
    def factory(*args_, **kwargs_):
        if baseMetricsType.subclass:
            return baseMetricsType.subclass(*args_, **kwargs_)
        else:
            return baseMetricsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_score(self): return self.score
    def set_score(self, score): self.score = score
    def validate_zeroToTenDecimalType(self, value):
        # Validate type zeroToTenDecimalType, a restriction on xsd:decimal.
        pass
    def get_exploit_subscore(self): return self.exploit_subscore
    def set_exploit_subscore(self, exploit_subscore): self.exploit_subscore = exploit_subscore
    def get_impact_subscore(self): return self.impact_subscore
    def set_impact_subscore(self, impact_subscore): self.impact_subscore = impact_subscore
    def get_access_vector(self): return self.access_vector
    def set_access_vector(self, access_vector): self.access_vector = access_vector
    def get_access_complexity(self): return self.access_complexity
    def set_access_complexity(self, access_complexity): self.access_complexity = access_complexity
    def get_authentication(self): return self.authentication
    def set_authentication(self, authentication): self.authentication = authentication
    def get_confidentiality_impact(self): return self.confidentiality_impact
    def set_confidentiality_impact(self, confidentiality_impact): self.confidentiality_impact = confidentiality_impact
    def get_integrity_impact(self): return self.integrity_impact
    def set_integrity_impact(self, integrity_impact): self.integrity_impact = integrity_impact
    def get_availability_impact(self): return self.availability_impact
    def set_availability_impact(self, availability_impact): self.availability_impact = availability_impact
    def get_source(self): return self.source
    def set_source(self, source): self.source = source
    def get_generated_on_datetime(self): return self.generated_on_datetime
    def set_generated_on_datetime(self, generated_on_datetime): self.generated_on_datetime = generated_on_datetime
    def hasContent_(self):
        if (
            self.score is not None or
            self.exploit_subscore is not None or
            self.impact_subscore is not None or
            self.access_vector is not None or
            self.access_complexity is not None or
            self.authentication is not None or
            self.confidentiality_impact is not None or
            self.integrity_impact is not None or
            self.availability_impact is not None or
            self.source is not None or
            self.generated_on_datetime is not None or
            super(baseMetricsType, self).hasContent_()
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='baseMetricsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='baseMetricsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='baseMetricsType'):
        super(baseMetricsType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='baseMetricsType')
    def exportChildren(self, outfile, level, namespace_='', name_='baseMetricsType', fromsubclass_=False, pretty_print=True):
        super(baseMetricsType, self).exportChildren(outfile, level, '', name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.score is not None:
            outfile.write('<%sscore>%s</%sscore>%s' % ('', self.gds_format_float(self.score, input_name='score'), '', eol_))
        if self.exploit_subscore is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sexploit-subscore>%s</%sexploit-subscore>%s' % ('', self.gds_format_float(self.exploit_subscore, input_name='exploit-subscore'), '', eol_))
        if self.impact_subscore is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%simpact-subscore>%s</%simpact-subscore>%s' % ('', self.gds_format_float(self.impact_subscore, input_name='impact-subscore'), '', eol_))
        if self.access_vector is not None:
            self.access_vector.export(outfile, level, '', name_='access-vector', pretty_print=pretty_print)
        if self.access_complexity is not None:
            self.access_complexity.export(outfile, level, '', name_='access-complexity', pretty_print=pretty_print)
        if self.authentication is not None:
            self.authentication.export(outfile, level, '', name_='authentication', pretty_print=pretty_print)
        if self.confidentiality_impact is not None:
            self.confidentiality_impact.export(outfile, level, '', name_='confidentiality-impact', pretty_print=pretty_print)
        if self.integrity_impact is not None:
            self.integrity_impact.export(outfile, level, '', name_='integrity-impact', pretty_print=pretty_print)
        if self.availability_impact is not None:
            self.availability_impact.export(outfile, level, '', name_='availability-impact', pretty_print=pretty_print)
        if self.source is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssource>%s</%ssource>%s' % ('', self.gds_format_string(quote_xml(self.source).encode(ExternalEncoding), input_name='source'), '', eol_))
        if self.generated_on_datetime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgenerated-on-datetime>%s</%sgenerated-on-datetime>%s' % ('', self.gds_format_datetime(self.generated_on_datetime, input_name='generated-on-datetime'), '', eol_))
    def exportLiteral(self, outfile, level, name_='baseMetricsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(baseMetricsType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(baseMetricsType, self).exportLiteralChildren(outfile, level, name_)
        if self.score is not None:
            outfile.write('score=%f,\n' % self.score)
        if self.exploit_subscore is not None:
            showIndent(outfile, level)
            outfile.write('exploit_subscore=%f,\n' % self.exploit_subscore)
        if self.impact_subscore is not None:
            showIndent(outfile, level)
            outfile.write('impact_subscore=%f,\n' % self.impact_subscore)
        if self.access_vector is not None:
            showIndent(outfile, level)
            outfile.write('access_vector=model_.accessVectorType(\n')
            self.access_vector.exportLiteral(outfile, level, name_='access_vector')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.access_complexity is not None:
            showIndent(outfile, level)
            outfile.write('access_complexity=model_.accessComplexityType(\n')
            self.access_complexity.exportLiteral(outfile, level, name_='access_complexity')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.authentication is not None:
            outfile.write('authentication=model_.authenticationType(\n')
            self.authentication.exportLiteral(outfile, level, name_='authentication')
            outfile.write('),\n')
        if self.confidentiality_impact is not None:
            showIndent(outfile, level)
            outfile.write('confidentiality_impact=model_.ciaType(\n')
            self.confidentiality_impact.exportLiteral(outfile, level, name_='confidentiality_impact')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.integrity_impact is not None:
            showIndent(outfile, level)
            outfile.write('integrity_impact=model_.ciaType(\n')
            self.integrity_impact.exportLiteral(outfile, level, name_='integrity_impact')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.availability_impact is not None:
            showIndent(outfile, level)
            outfile.write('availability_impact=model_.ciaType(\n')
            self.availability_impact.exportLiteral(outfile, level, name_='availability_impact')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.source is not None:
            showIndent(outfile, level)
            outfile.write('source=%s,\n' % quote_python(self.source).encode(ExternalEncoding))
        if self.generated_on_datetime is not None:
            showIndent(outfile, level)
            outfile.write('generated_on_datetime=datetime_.strptime("%s", "%%Y-%%m-%%dT%%H:%%M:%%S"),\n' % self.gds_format_datetime(self.generated_on_datetime, input_name='generated_on_datetime'))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        super(baseMetricsType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'score':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'score')
            self.score = fval_
            self.validate_zeroToTenDecimalType(self.score)    # validate type zeroToTenDecimalType
        elif nodeName_ == 'exploit-subscore':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'exploit_subscore')
            self.exploit_subscore = fval_
            self.validate_zeroToTenDecimalType(self.exploit_subscore)    # validate type zeroToTenDecimalType
        elif nodeName_ == 'impact-subscore':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'impact_subscore')
            self.impact_subscore = fval_
            self.validate_zeroToTenDecimalType(self.impact_subscore)    # validate type zeroToTenDecimalType
        elif nodeName_ == 'access-vector':
            obj_ = accessVectorType.factory()
            obj_.build(child_)
            self.set_access_vector(obj_)
        elif nodeName_ == 'access-complexity':
            obj_ = accessComplexityType.factory()
            obj_.build(child_)
            self.set_access_complexity(obj_)
        elif nodeName_ == 'authentication':
            obj_ = authenticationType.factory()
            obj_.build(child_)
            self.set_authentication(obj_)
        elif nodeName_ == 'confidentiality-impact':
            obj_ = ciaType.factory()
            obj_.build(child_)
            self.set_confidentiality_impact(obj_)
        elif nodeName_ == 'integrity-impact':
            obj_ = ciaType.factory()
            obj_.build(child_)
            self.set_integrity_impact(obj_)
        elif nodeName_ == 'availability-impact':
            obj_ = ciaType.factory()
            obj_.build(child_)
            self.set_availability_impact(obj_)
        elif nodeName_ == 'source':
            source_ = child_.text
            source_ = self.gds_validate_string(source_, node, 'source')
            self.source = source_
        elif nodeName_ == 'generated-on-datetime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_, node, 'generated_on_datetime')
            self.generated_on_datetime = dval_
        super(baseMetricsType, self).buildChildren(child_, node, nodeName_, True)
# end class baseMetricsType

class environmentalMetricsType(metricsType):
    subclass = None
    superclass = metricsType
    def __init__(self, upgraded_from_version=None, score=None, collateral_damage_potential=None, target_distribution=None, confidentiality_requirement=None, integrity_requirement=None, availability_requirement=None, source=None, generated_on_datetime=None):
        super(environmentalMetricsType, self).__init__(upgraded_from_version, )
        self.score = score
        self.collateral_damage_potential = collateral_damage_potential
        self.target_distribution = target_distribution
        self.confidentiality_requirement = confidentiality_requirement
        self.integrity_requirement = integrity_requirement
        self.availability_requirement = availability_requirement
        self.source = source
        self.generated_on_datetime = generated_on_datetime
    def factory(*args_, **kwargs_):
        if environmentalMetricsType.subclass:
            return environmentalMetricsType.subclass(*args_, **kwargs_)
        else:
            return environmentalMetricsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_score(self): return self.score
    def set_score(self, score): self.score = score
    def validate_zeroToTenDecimalType(self, value):
        # Validate type zeroToTenDecimalType, a restriction on xsd:decimal.
        pass
    def get_collateral_damage_potential(self): return self.collateral_damage_potential
    def set_collateral_damage_potential(self, collateral_damage_potential): self.collateral_damage_potential = collateral_damage_potential
    def get_target_distribution(self): return self.target_distribution
    def set_target_distribution(self, target_distribution): self.target_distribution = target_distribution
    def get_confidentiality_requirement(self): return self.confidentiality_requirement
    def set_confidentiality_requirement(self, confidentiality_requirement): self.confidentiality_requirement = confidentiality_requirement
    def get_integrity_requirement(self): return self.integrity_requirement
    def set_integrity_requirement(self, integrity_requirement): self.integrity_requirement = integrity_requirement
    def get_availability_requirement(self): return self.availability_requirement
    def set_availability_requirement(self, availability_requirement): self.availability_requirement = availability_requirement
    def get_source(self): return self.source
    def set_source(self, source): self.source = source
    def get_generated_on_datetime(self): return self.generated_on_datetime
    def set_generated_on_datetime(self, generated_on_datetime): self.generated_on_datetime = generated_on_datetime
    def hasContent_(self):
        if (
            self.score is not None or
            self.collateral_damage_potential is not None or
            self.target_distribution is not None or
            self.confidentiality_requirement is not None or
            self.integrity_requirement is not None or
            self.availability_requirement is not None or
            self.source is not None or
            self.generated_on_datetime is not None or
            super(environmentalMetricsType, self).hasContent_()
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='environmentalMetricsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='environmentalMetricsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='environmentalMetricsType'):
        super(environmentalMetricsType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='environmentalMetricsType')
    def exportChildren(self, outfile, level, namespace_='', name_='environmentalMetricsType', fromsubclass_=False, pretty_print=True):
        super(environmentalMetricsType, self).exportChildren(outfile, level, '', name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.score is not None:
            outfile.write('<%sscore>%s</%sscore>%s' % ('', self.gds_format_float(self.score, input_name='score'), '', eol_))
        if self.collateral_damage_potential is not None:
            self.collateral_damage_potential.export(outfile, level, '', name_='collateral-damage-potential', pretty_print=pretty_print)
        if self.target_distribution is not None:
            self.target_distribution.export(outfile, level, '', name_='target-distribution', pretty_print=pretty_print)
        if self.confidentiality_requirement is not None:
            self.confidentiality_requirement.export(outfile, level, '', name_='confidentiality-requirement', pretty_print=pretty_print)
        if self.integrity_requirement is not None:
            self.integrity_requirement.export(outfile, level, '', name_='integrity-requirement', pretty_print=pretty_print)
        if self.availability_requirement is not None:
            self.availability_requirement.export(outfile, level, '', name_='availability-requirement', pretty_print=pretty_print)
        if self.source is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssource>%s</%ssource>%s' % ('', self.gds_format_string(quote_xml(self.source).encode(ExternalEncoding), input_name='source'), '', eol_))
        if self.generated_on_datetime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgenerated-on-datetime>%s</%sgenerated-on-datetime>%s' % ('', self.gds_format_datetime(self.generated_on_datetime, input_name='generated-on-datetime'), '', eol_))
    def exportLiteral(self, outfile, level, name_='environmentalMetricsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(environmentalMetricsType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(environmentalMetricsType, self).exportLiteralChildren(outfile, level, name_)
        if self.score is not None:
            outfile.write('score=%f,\n' % self.score)
        if self.collateral_damage_potential is not None:
            showIndent(outfile, level)
            outfile.write('collateral_damage_potential=model_.collateralDamagePotentialType(\n')
            self.collateral_damage_potential.exportLiteral(outfile, level, name_='collateral_damage_potential')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.target_distribution is not None:
            showIndent(outfile, level)
            outfile.write('target_distribution=model_.targetDistributionType(\n')
            self.target_distribution.exportLiteral(outfile, level, name_='target_distribution')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.confidentiality_requirement is not None:
            showIndent(outfile, level)
            outfile.write('confidentiality_requirement=model_.ciaRequirementType(\n')
            self.confidentiality_requirement.exportLiteral(outfile, level, name_='confidentiality_requirement')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.integrity_requirement is not None:
            showIndent(outfile, level)
            outfile.write('integrity_requirement=model_.ciaRequirementType(\n')
            self.integrity_requirement.exportLiteral(outfile, level, name_='integrity_requirement')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.availability_requirement is not None:
            showIndent(outfile, level)
            outfile.write('availability_requirement=model_.ciaRequirementType(\n')
            self.availability_requirement.exportLiteral(outfile, level, name_='availability_requirement')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.source is not None:
            showIndent(outfile, level)
            outfile.write('source=%s,\n' % quote_python(self.source).encode(ExternalEncoding))
        if self.generated_on_datetime is not None:
            showIndent(outfile, level)
            outfile.write('generated_on_datetime=datetime_.strptime("%s", "%%Y-%%m-%%dT%%H:%%M:%%S"),\n' % self.gds_format_datetime(self.generated_on_datetime, input_name='generated_on_datetime'))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        super(environmentalMetricsType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'score':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'score')
            self.score = fval_
            self.validate_zeroToTenDecimalType(self.score)    # validate type zeroToTenDecimalType
        elif nodeName_ == 'collateral-damage-potential':
            obj_ = collateralDamagePotentialType.factory()
            obj_.build(child_)
            self.set_collateral_damage_potential(obj_)
        elif nodeName_ == 'target-distribution':
            obj_ = targetDistributionType.factory()
            obj_.build(child_)
            self.set_target_distribution(obj_)
        elif nodeName_ == 'confidentiality-requirement':
            obj_ = ciaRequirementType.factory()
            obj_.build(child_)
            self.set_confidentiality_requirement(obj_)
        elif nodeName_ == 'integrity-requirement':
            obj_ = ciaRequirementType.factory()
            obj_.build(child_)
            self.set_integrity_requirement(obj_)
        elif nodeName_ == 'availability-requirement':
            obj_ = ciaRequirementType.factory()
            obj_.build(child_)
            self.set_availability_requirement(obj_)
        elif nodeName_ == 'source':
            source_ = child_.text
            source_ = self.gds_validate_string(source_, node, 'source')
            self.source = source_
        elif nodeName_ == 'generated-on-datetime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_, node, 'generated_on_datetime')
            self.generated_on_datetime = dval_
        super(environmentalMetricsType, self).buildChildren(child_, node, nodeName_, True)
# end class environmentalMetricsType

class temporalMetricsType(metricsType):
    subclass = None
    superclass = metricsType
    def __init__(self, upgraded_from_version=None, score=None, temporal_multiplier=None, exploitability=None, remediation_level=None, report_confidence=None, source=None, generated_on_datetime=None):
        super(temporalMetricsType, self).__init__(upgraded_from_version, )
        self.score = score
        self.temporal_multiplier = temporal_multiplier
        self.exploitability = exploitability
        self.remediation_level = remediation_level
        self.report_confidence = report_confidence
        self.source = source
        self.generated_on_datetime = generated_on_datetime
    def factory(*args_, **kwargs_):
        if temporalMetricsType.subclass:
            return temporalMetricsType.subclass(*args_, **kwargs_)
        else:
            return temporalMetricsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_score(self): return self.score
    def set_score(self, score): self.score = score
    def validate_zeroToTenDecimalType(self, value):
        # Validate type zeroToTenDecimalType, a restriction on xsd:decimal.
        pass
    def get_temporal_multiplier(self): return self.temporal_multiplier
    def set_temporal_multiplier(self, temporal_multiplier): self.temporal_multiplier = temporal_multiplier
    def get_exploitability(self): return self.exploitability
    def set_exploitability(self, exploitability): self.exploitability = exploitability
    def get_remediation_level(self): return self.remediation_level
    def set_remediation_level(self, remediation_level): self.remediation_level = remediation_level
    def get_report_confidence(self): return self.report_confidence
    def set_report_confidence(self, report_confidence): self.report_confidence = report_confidence
    def get_source(self): return self.source
    def set_source(self, source): self.source = source
    def get_generated_on_datetime(self): return self.generated_on_datetime
    def set_generated_on_datetime(self, generated_on_datetime): self.generated_on_datetime = generated_on_datetime
    def hasContent_(self):
        if (
            self.score is not None or
            self.temporal_multiplier is not None or
            self.exploitability is not None or
            self.remediation_level is not None or
            self.report_confidence is not None or
            self.source is not None or
            self.generated_on_datetime is not None or
            super(temporalMetricsType, self).hasContent_()
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='temporalMetricsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='temporalMetricsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='temporalMetricsType'):
        super(temporalMetricsType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='temporalMetricsType')
    def exportChildren(self, outfile, level, namespace_='', name_='temporalMetricsType', fromsubclass_=False, pretty_print=True):
        super(temporalMetricsType, self).exportChildren(outfile, level, '', name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.score is not None:
            outfile.write('<%sscore>%s</%sscore>%s' % ('', self.gds_format_float(self.score, input_name='score'), '', eol_))
        if self.temporal_multiplier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stemporal-multiplier>%s</%stemporal-multiplier>%s' % ('', self.gds_format_float(self.temporal_multiplier, input_name='temporal-multiplier'), '', eol_))
        if self.exploitability is not None:
            self.exploitability.export(outfile, level, '', name_='exploitability', pretty_print=pretty_print)
        if self.remediation_level is not None:
            self.remediation_level.export(outfile, level, '', name_='remediation-level', pretty_print=pretty_print)
        if self.report_confidence is not None:
            self.report_confidence.export(outfile, level, '', name_='report-confidence', pretty_print=pretty_print)
        if self.source is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssource>%s</%ssource>%s' % ('', self.gds_format_string(quote_xml(self.source).encode(ExternalEncoding), input_name='source'), '', eol_))
        if self.generated_on_datetime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgenerated-on-datetime>%s</%sgenerated-on-datetime>%s' % ('', self.gds_format_datetime(self.generated_on_datetime, input_name='generated-on-datetime'), '', eol_))
    def exportLiteral(self, outfile, level, name_='temporalMetricsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(temporalMetricsType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(temporalMetricsType, self).exportLiteralChildren(outfile, level, name_)
        if self.score is not None:
            outfile.write('score=%f,\n' % self.score)
        if self.temporal_multiplier is not None:
            showIndent(outfile, level)
            outfile.write('temporal_multiplier=%f,\n' % self.temporal_multiplier)
        if self.exploitability is not None:
            outfile.write('exploitability=model_.exploitabilityType(\n')
            self.exploitability.exportLiteral(outfile, level, name_='exploitability')
            outfile.write('),\n')
        if self.remediation_level is not None:
            showIndent(outfile, level)
            outfile.write('remediation_level=model_.remediationLevelType(\n')
            self.remediation_level.exportLiteral(outfile, level, name_='remediation_level')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.report_confidence is not None:
            showIndent(outfile, level)
            outfile.write('report_confidence=model_.confidenceType(\n')
            self.report_confidence.exportLiteral(outfile, level, name_='report_confidence')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.source is not None:
            showIndent(outfile, level)
            outfile.write('source=%s,\n' % quote_python(self.source).encode(ExternalEncoding))
        if self.generated_on_datetime is not None:
            showIndent(outfile, level)
            outfile.write('generated_on_datetime=datetime_.strptime("%s", "%%Y-%%m-%%dT%%H:%%M:%%S"),\n' % self.gds_format_datetime(self.generated_on_datetime, input_name='generated_on_datetime'))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        super(temporalMetricsType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'score':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'score')
            self.score = fval_
            self.validate_zeroToTenDecimalType(self.score)    # validate type zeroToTenDecimalType
        elif nodeName_ == 'temporal-multiplier':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'temporal_multiplier')
            self.temporal_multiplier = fval_
        elif nodeName_ == 'exploitability':
            obj_ = exploitabilityType.factory()
            obj_.build(child_)
            self.set_exploitability(obj_)
        elif nodeName_ == 'remediation-level':
            obj_ = remediationLevelType.factory()
            obj_.build(child_)
            self.set_remediation_level(obj_)
        elif nodeName_ == 'report-confidence':
            obj_ = confidenceType.factory()
            obj_.build(child_)
            self.set_report_confidence(obj_)
        elif nodeName_ == 'source':
            source_ = child_.text
            source_ = self.gds_validate_string(source_, node, 'source')
            self.source = source_
        elif nodeName_ == 'generated-on-datetime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_, node, 'generated_on_datetime')
            self.generated_on_datetime = dval_
        super(temporalMetricsType, self).buildChildren(child_, node, nodeName_, True)
# end class temporalMetricsType

GDSClassesMapping = {
}

USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)

def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass

def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'accessComplexityType'
        rootClass = accessComplexityType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag,
        namespacedef_='',
        pretty_print=True)
    return rootObj

def parseEtree(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'accessComplexityType'
        rootClass = accessComplexityType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    rootElement = rootObj.to_etree(None, name_=rootTag)
    content = etree_.tostring(rootElement, pretty_print=True,
        xml_declaration=True, encoding="utf-8")
    sys.stdout.write(content)
    sys.stdout.write('\n')
    return rootObj, rootElement

def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'accessComplexityType'
        rootClass = accessComplexityType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="accessComplexityType",
        namespacedef_='')
    return rootObj

def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'accessComplexityType'
        rootClass = accessComplexityType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from cvss-v2_0.9 import *\n\n')
    sys.stdout.write('from datetime import datetime as datetime_\n\n')
    sys.stdout.write('import cvss-v2_0.9 as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj

def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()

if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

__all__ = [
    "accessComplexityType",
    "accessVectorType",
    "ciaRequirementType",
    "collateralDamagePotentialType",
    "targetDistributionType",
    "ciaType",
    "authenticationType",
    "remediationLevelType",
    "confidenceType",
    "exploitabilityType",
    "cvssType",
    "cvssImpactType",
    "cvssImpactBaseType",
    "cvssImpactTemporalType",
    "cvssImpactEnvironmentalType",
    "metricsType",
    "baseMetricsType",
    "environmentalMetricsType",
    "temporalMetricsType"
    ]