#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Apr 11 15:08:14 2013 by generateDS.py version 2.9a.
#

import sys
import getopt
import re as re_

import commontype
import xlink-2003-12-31
import base64
from datetime import datetime, tzinfo, timedelta

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError(
                        "Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(tzinfo):
            def __init__(self, offset, name):
                self.__offset = timedelta(minutes = offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return input_data
        def gds_validate_datetime(self, input_data, node, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = input_data.strftime('%Y-%m-%dT%H:%M:%S')
            else:
                _svalue = input_data.strftime('%Y-%m-%dT%H:%M:%S.%f')
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_parse_datetime(self, input_data, node, input_name=''):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'GMT')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime.strptime(
                        input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime.strptime(
                        input_data, '%Y-%m-%dT%H:%M:%S')
            return dt.replace(tzinfo = tz)

        def gds_validate_date(self, input_data, node, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = input_data.strftime('%Y-%m-%d')
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_parse_date(self, input_data, node, input_name=''):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'GMT')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            return datetime.strptime(input_data,
                '%Y-%m-%d').replace(tzinfo = tz)
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (
            msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' %
                (self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n'
                % (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n'
                % (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class PartyNameType(GeneratedsSuper):
    """Reusable complex type for a party. A party is a person or an
    organisationA unique identifier of a partyType of Party Name
    IDGlobally unique identifierTye of use of this data. e.g. data
    exchange, contact, update, createStatus of the entity. e.g. Old,
    Current, Inactive, Active, etcThe connector used to join more
    than one person name. Example: Mr Hunt AND Mrs Clark, where AND
    is the JointNameConnector. The flow is from the preceding to the
    following. If there is more than 2 names then all names are
    connected using this connector in the natural order."""
    subclass = None
    superclass = None
    def __init__(self, Status=None, LanguageCode=None, NameKeyRef=None, PartyNameIDType=None, ValidTo=None, DateValidFrom=None, JointNameConnector=None, ID=None, DateValidTo=None, href=None, ValidFrom=None, NameKey=None, Usage=None, DataQualityType=None, label=None, type_=None, PartyNameID=None, NameLine=None, PersonName=None, OrganisationName=None):
        self.Status = _cast(None, Status)
        self.LanguageCode = _cast(None, LanguageCode)
        self.NameKeyRef = _cast(None, NameKeyRef)
        self.PartyNameIDType = _cast(None, PartyNameIDType)
        self.ValidTo = _cast(None, ValidTo)
        self.DateValidFrom = _cast(None, DateValidFrom)
        self.JointNameConnector = _cast(None, JointNameConnector)
        self.ID = _cast(None, ID)
        self.DateValidTo = _cast(None, DateValidTo)
        self.href = _cast(None, href)
        self.ValidFrom = _cast(None, ValidFrom)
        self.NameKey = _cast(None, NameKey)
        self.Usage = _cast(None, Usage)
        self.DataQualityType = _cast(None, DataQualityType)
        self.label = _cast(None, label)
        self.type_ = _cast(None, type_)
        self.PartyNameID = _cast(None, PartyNameID)
        if NameLine is None:
            self.NameLine = []
        else:
            self.NameLine = NameLine
        if PersonName is None:
            self.PersonName = []
        else:
            self.PersonName = PersonName
        if OrganisationName is None:
            self.OrganisationName = []
        else:
            self.OrganisationName = OrganisationName
        self.anyAttributes_ = {}
    def factory(*args_, **kwargs_):
        if PartyNameType.subclass:
            return PartyNameType.subclass(*args_, **kwargs_)
        else:
            return PartyNameType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NameLine(self): return self.NameLine
    def set_NameLine(self, NameLine): self.NameLine = NameLine
    def add_NameLine(self, value): self.NameLine.append(value)
    def insert_NameLine(self, index, value): self.NameLine[index] = value
    def get_PersonName(self): return self.PersonName
    def set_PersonName(self, PersonName): self.PersonName = PersonName
    def add_PersonName(self, value): self.PersonName.append(value)
    def insert_PersonName(self, index, value): self.PersonName[index] = value
    def get_OrganisationName(self): return self.OrganisationName
    def set_OrganisationName(self, OrganisationName): self.OrganisationName = OrganisationName
    def add_OrganisationName(self, value): self.OrganisationName.append(value)
    def insert_OrganisationName(self, index, value): self.OrganisationName[index] = value
    def get_Status(self): return self.Status
    def set_Status(self, Status): self.Status = Status
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NameKeyRef(self): return self.NameKeyRef
    def set_NameKeyRef(self, NameKeyRef): self.NameKeyRef = NameKeyRef
    def get_PartyNameIDType(self): return self.PartyNameIDType
    def set_PartyNameIDType(self, PartyNameIDType): self.PartyNameIDType = PartyNameIDType
    def validate_PartyNameIDTypeList(self, value):
        # Validate type PartyNameIDTypeList, a restriction on xs:normalizedString.
        pass
    def get_ValidTo(self): return self.ValidTo
    def set_ValidTo(self, ValidTo): self.ValidTo = ValidTo
    def get_DateValidFrom(self): return self.DateValidFrom
    def set_DateValidFrom(self, DateValidFrom): self.DateValidFrom = DateValidFrom
    def get_JointNameConnector(self): return self.JointNameConnector
    def set_JointNameConnector(self, JointNameConnector): self.JointNameConnector = JointNameConnector
    def validate_JointNameConnectorList(self, value):
        # Validate type JointNameConnectorList, a restriction on xs:normalizedString.
        pass
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def get_DateValidTo(self): return self.DateValidTo
    def set_DateValidTo(self, DateValidTo): self.DateValidTo = DateValidTo
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_ValidFrom(self): return self.ValidFrom
    def set_ValidFrom(self, ValidFrom): self.ValidFrom = ValidFrom
    def get_NameKey(self): return self.NameKey
    def set_NameKey(self, NameKey): self.NameKey = NameKey
    def get_Usage(self): return self.Usage
    def set_Usage(self, Usage): self.Usage = Usage
    def validate_PartyNameUsageList(self, value):
        # Validate type PartyNameUsageList, a restriction on xs:string.
        pass
    def get_DataQualityType(self): return self.DataQualityType
    def set_DataQualityType(self, DataQualityType): self.DataQualityType = DataQualityType
    def validate_DataQualityTypeList(self, value):
        # Validate type DataQualityTypeList, a restriction on xs:string.
        pass
    def get_label(self): return self.label
    def set_label(self, label): self.label = label
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_PartyNameID(self): return self.PartyNameID
    def set_PartyNameID(self, PartyNameID): self.PartyNameID = PartyNameID
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def hasContent_(self):
        if (
            self.NameLine or
            self.PersonName or
            self.OrganisationName
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PartyNameType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PartyNameType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PartyNameType'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.add(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.add(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (
                                name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (
                                unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (
                                unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.add(name)
                        outfile.write(' %s=%s' % (
                            name, quote_attrib(value), ))
        if self.Status is not None and 'Status' not in already_processed:
            already_processed.add('Status')
            outfile.write(' Status=%s' % (quote_attrib(self.Status), ))
        if self.LanguageCode is not None and 'LanguageCode' not in already_processed:
            already_processed.add('LanguageCode')
            outfile.write(' LanguageCode=%s' % (self.gds_format_string(quote_attrib(self.LanguageCode).encode(ExternalEncoding), input_name='LanguageCode'), ))
        if self.NameKeyRef is not None and 'NameKeyRef' not in already_processed:
            already_processed.add('NameKeyRef')
            outfile.write(' NameKeyRef=%s' % (quote_attrib(self.NameKeyRef), ))
        if self.PartyNameIDType is not None and 'PartyNameIDType' not in already_processed:
            already_processed.add('PartyNameIDType')
            outfile.write(' PartyNameIDType=%s' % (quote_attrib(self.PartyNameIDType), ))
        if self.ValidTo is not None and 'ValidTo' not in already_processed:
            already_processed.add('ValidTo')
            outfile.write(' ValidTo="%s"' % self.gds_format_datetime(self.ValidTo, input_name='ValidTo'))
        if self.DateValidFrom is not None and 'DateValidFrom' not in already_processed:
            already_processed.add('DateValidFrom')
            outfile.write(' DateValidFrom="%s"' % self.gds_format_datetime(self.DateValidFrom, input_name='DateValidFrom'))
        if self.JointNameConnector is not None and 'JointNameConnector' not in already_processed:
            already_processed.add('JointNameConnector')
            outfile.write(' JointNameConnector=%s' % (quote_attrib(self.JointNameConnector), ))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            outfile.write(' ID=%s' % (quote_attrib(self.ID), ))
        if self.DateValidTo is not None and 'DateValidTo' not in already_processed:
            already_processed.add('DateValidTo')
            outfile.write(' DateValidTo="%s"' % self.gds_format_datetime(self.DateValidTo, input_name='DateValidTo'))
        if self.href is not None and 'href' not in already_processed:
            already_processed.add('href')
            outfile.write(' href=%s' % (self.gds_format_string(quote_attrib(self.href).encode(ExternalEncoding), input_name='href'), ))
        if self.ValidFrom is not None and 'ValidFrom' not in already_processed:
            already_processed.add('ValidFrom')
            outfile.write(' ValidFrom="%s"' % self.gds_format_datetime(self.ValidFrom, input_name='ValidFrom'))
        if self.NameKey is not None and 'NameKey' not in already_processed:
            already_processed.add('NameKey')
            outfile.write(' NameKey=%s' % (quote_attrib(self.NameKey), ))
        if self.Usage is not None and 'Usage' not in already_processed:
            already_processed.add('Usage')
            outfile.write(' Usage=%s' % (quote_attrib(self.Usage), ))
        if self.DataQualityType is not None and 'DataQualityType' not in already_processed:
            already_processed.add('DataQualityType')
            outfile.write(' DataQualityType=%s' % (quote_attrib(self.DataQualityType), ))
        if self.label is not None and 'label' not in already_processed:
            already_processed.add('label')
            outfile.write(' label=%s' % (self.gds_format_string(quote_attrib(self.label).encode(ExternalEncoding), input_name='label'), ))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
        if self.PartyNameID is not None and 'PartyNameID' not in already_processed:
            already_processed.add('PartyNameID')
            outfile.write(' PartyNameID=%s' % (quote_attrib(self.PartyNameID), ))
    def exportChildren(self, outfile, level, namespace_='', name_='PartyNameType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for NameLine_ in self.NameLine:
            NameLine_.export(outfile, level, '', name_='NameLine', pretty_print=pretty_print)
        for PersonName_ in self.PersonName:
            PersonName_.export(outfile, level, '', name_='PersonName', pretty_print=pretty_print)
        for OrganisationName_ in self.OrganisationName:
            OrganisationName_.export(outfile, level, '', name_='OrganisationName', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='PartyNameType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Status is not None and 'Status' not in already_processed:
            already_processed.add('Status')
            showIndent(outfile, level)
            outfile.write('Status = %s,\n' % (self.Status,))
        if self.LanguageCode is not None and 'LanguageCode' not in already_processed:
            already_processed.add('LanguageCode')
            showIndent(outfile, level)
            outfile.write('LanguageCode = "%s",\n' % (self.LanguageCode,))
        if self.NameKeyRef is not None and 'NameKeyRef' not in already_processed:
            already_processed.add('NameKeyRef')
            showIndent(outfile, level)
            outfile.write('NameKeyRef = %s,\n' % (self.NameKeyRef,))
        if self.PartyNameIDType is not None and 'PartyNameIDType' not in already_processed:
            already_processed.add('PartyNameIDType')
            showIndent(outfile, level)
            outfile.write('PartyNameIDType = "%s",\n' % (self.PartyNameIDType,))
        if self.ValidTo is not None and 'ValidTo' not in already_processed:
            already_processed.add('ValidTo')
            showIndent(outfile, level)
            outfile.write('ValidTo = "%s",\n' % (self.ValidTo,))
        if self.DateValidFrom is not None and 'DateValidFrom' not in already_processed:
            already_processed.add('DateValidFrom')
            showIndent(outfile, level)
            outfile.write('DateValidFrom = "%s",\n' % (self.DateValidFrom,))
        if self.JointNameConnector is not None and 'JointNameConnector' not in already_processed:
            already_processed.add('JointNameConnector')
            showIndent(outfile, level)
            outfile.write('JointNameConnector = "%s",\n' % (self.JointNameConnector,))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            showIndent(outfile, level)
            outfile.write('ID = %s,\n' % (self.ID,))
        if self.DateValidTo is not None and 'DateValidTo' not in already_processed:
            already_processed.add('DateValidTo')
            showIndent(outfile, level)
            outfile.write('DateValidTo = "%s",\n' % (self.DateValidTo,))
        if self.href is not None and 'href' not in already_processed:
            already_processed.add('href')
            showIndent(outfile, level)
            outfile.write('href = "%s",\n' % (self.href,))
        if self.ValidFrom is not None and 'ValidFrom' not in already_processed:
            already_processed.add('ValidFrom')
            showIndent(outfile, level)
            outfile.write('ValidFrom = "%s",\n' % (self.ValidFrom,))
        if self.NameKey is not None and 'NameKey' not in already_processed:
            already_processed.add('NameKey')
            showIndent(outfile, level)
            outfile.write('NameKey = %s,\n' % (self.NameKey,))
        if self.Usage is not None and 'Usage' not in already_processed:
            already_processed.add('Usage')
            showIndent(outfile, level)
            outfile.write('Usage = "%s",\n' % (self.Usage,))
        if self.DataQualityType is not None and 'DataQualityType' not in already_processed:
            already_processed.add('DataQualityType')
            showIndent(outfile, level)
            outfile.write('DataQualityType = "%s",\n' % (self.DataQualityType,))
        if self.label is not None and 'label' not in already_processed:
            already_processed.add('label')
            showIndent(outfile, level)
            outfile.write('label = "%s",\n' % (self.label,))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            showIndent(outfile, level)
            outfile.write('type_ = "%s",\n' % (self.type_,))
        if self.PartyNameID is not None and 'PartyNameID' not in already_processed:
            already_processed.add('PartyNameID')
            showIndent(outfile, level)
            outfile.write('PartyNameID = %s,\n' % (self.PartyNameID,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('NameLine=[\n')
        level += 1
        for NameLine_ in self.NameLine:
            showIndent(outfile, level)
            outfile.write('model_.NameLine(\n')
            NameLine_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('PersonName=[\n')
        level += 1
        for PersonName_ in self.PersonName:
            outfile.write('model_.PersonNameType1(\n')
            PersonName_.exportLiteral(outfile, level, name_='PersonNameType1')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('OrganisationName=[\n')
        level += 1
        for OrganisationName_ in self.OrganisationName:
            outfile.write('model_.OrganisationNameType3(\n')
            OrganisationName_.exportLiteral(outfile, level, name_='OrganisationNameType3')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Status', node)
        if value is not None and 'Status' not in already_processed:
            already_processed.add('Status')
            self.Status = value
        value = find_attr_value_('LanguageCode', node)
        if value is not None and 'LanguageCode' not in already_processed:
            already_processed.add('LanguageCode')
            self.LanguageCode = value
        value = find_attr_value_('NameKeyRef', node)
        if value is not None and 'NameKeyRef' not in already_processed:
            already_processed.add('NameKeyRef')
            self.NameKeyRef = value
        value = find_attr_value_('PartyNameIDType', node)
        if value is not None and 'PartyNameIDType' not in already_processed:
            already_processed.add('PartyNameIDType')
            self.PartyNameIDType = value
            self.validate_PartyNameIDTypeList(self.PartyNameIDType)    # validate type PartyNameIDTypeList
        value = find_attr_value_('ValidTo', node)
        if value is not None and 'ValidTo' not in already_processed:
            already_processed.add('ValidTo')
            try:
                self.ValidTo = self.gds_parse_datetime(value, node, 'ValidTo')
            except ValueError, exp:
                raise ValueError('Bad date-time attribute (ValidTo): %s' % exp)
        value = find_attr_value_('DateValidFrom', node)
        if value is not None and 'DateValidFrom' not in already_processed:
            already_processed.add('DateValidFrom')
            try:
                self.DateValidFrom = self.gds_parse_datetime(value, node, 'DateValidFrom')
            except ValueError, exp:
                raise ValueError('Bad date-time attribute (DateValidFrom): %s' % exp)
        value = find_attr_value_('JointNameConnector', node)
        if value is not None and 'JointNameConnector' not in already_processed:
            already_processed.add('JointNameConnector')
            self.JointNameConnector = value
            self.validate_JointNameConnectorList(self.JointNameConnector)    # validate type JointNameConnectorList
        value = find_attr_value_('ID', node)
        if value is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            self.ID = value
        value = find_attr_value_('DateValidTo', node)
        if value is not None and 'DateValidTo' not in already_processed:
            already_processed.add('DateValidTo')
            try:
                self.DateValidTo = self.gds_parse_datetime(value, node, 'DateValidTo')
            except ValueError, exp:
                raise ValueError('Bad date-time attribute (DateValidTo): %s' % exp)
        value = find_attr_value_('href', node)
        if value is not None and 'href' not in already_processed:
            already_processed.add('href')
            self.href = value
        value = find_attr_value_('ValidFrom', node)
        if value is not None and 'ValidFrom' not in already_processed:
            already_processed.add('ValidFrom')
            try:
                self.ValidFrom = self.gds_parse_datetime(value, node, 'ValidFrom')
            except ValueError, exp:
                raise ValueError('Bad date-time attribute (ValidFrom): %s' % exp)
        value = find_attr_value_('NameKey', node)
        if value is not None and 'NameKey' not in already_processed:
            already_processed.add('NameKey')
            self.NameKey = value
        value = find_attr_value_('Usage', node)
        if value is not None and 'Usage' not in already_processed:
            already_processed.add('Usage')
            self.Usage = value
            self.validate_PartyNameUsageList(self.Usage)    # validate type PartyNameUsageList
        value = find_attr_value_('DataQualityType', node)
        if value is not None and 'DataQualityType' not in already_processed:
            already_processed.add('DataQualityType')
            self.DataQualityType = value
            self.validate_DataQualityTypeList(self.DataQualityType)    # validate type DataQualityTypeList
        value = find_attr_value_('label', node)
        if value is not None and 'label' not in already_processed:
            already_processed.add('label')
            self.label = value
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
        value = find_attr_value_('PartyNameID', node)
        if value is not None and 'PartyNameID' not in already_processed:
            already_processed.add('PartyNameID')
            self.PartyNameID = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NameLine':
            obj_ = NameLine.factory()
            obj_.build(child_)
            self.NameLine.append(obj_)
        elif nodeName_ == 'PersonName':
            obj_ = PersonNameType.factory()
            obj_.build(child_)
            self.PersonName.append(obj_)
        elif nodeName_ == 'OrganisationName':
            obj_ = OrganisationNameType.factory()
            obj_.build(child_)
            self.OrganisationName.append(obj_)
# end class PartyNameType

class PersonNameType(GeneratedsSuper):
    """Reusable complex typeEnumerated list of type of name. example:
    Alias, Nick Name, former name, known as, etcA unique identifier
    of a personType of identifierGlobally unique identifierUsage of
    a person name. How is it used and for what purpose. Allows user
    which name in a set of names to select for a given purpose. e.g.
    used for legal purposesStatus of the entity. e.g. Old, Current,
    Inactive, Active, etc"""
    subclass = None
    superclass = None
    def __init__(self, Status=None, LanguageCode=None, NameKeyRef=None, PersonID=None, type_=None, ValidTo=None, DateValidFrom=None, label=None, DateValidTo=None, href=None, PersonIDType=None, NameKey=None, Usage=None, DataQualityType=None, ValidFrom=None, Type=None, ID=None, NameElement=None, extensiontype_=None):
        self.Status = _cast(None, Status)
        self.LanguageCode = _cast(None, LanguageCode)
        self.NameKeyRef = _cast(None, NameKeyRef)
        self.PersonID = _cast(None, PersonID)
        self.type_ = _cast(None, type_)
        self.ValidTo = _cast(None, ValidTo)
        self.DateValidFrom = _cast(None, DateValidFrom)
        self.label = _cast(None, label)
        self.DateValidTo = _cast(None, DateValidTo)
        self.href = _cast(None, href)
        self.PersonIDType = _cast(None, PersonIDType)
        self.NameKey = _cast(None, NameKey)
        self.Usage = _cast(None, Usage)
        self.DataQualityType = _cast(None, DataQualityType)
        self.ValidFrom = _cast(None, ValidFrom)
        self.Type = _cast(None, Type)
        self.ID = _cast(None, ID)
        if NameElement is None:
            self.NameElement = []
        else:
            self.NameElement = NameElement
        self.anyAttributes_ = {}
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if PersonNameType.subclass:
            return PersonNameType.subclass(*args_, **kwargs_)
        else:
            return PersonNameType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NameElement(self): return self.NameElement
    def set_NameElement(self, NameElement): self.NameElement = NameElement
    def add_NameElement(self, value): self.NameElement.append(value)
    def insert_NameElement(self, index, value): self.NameElement[index] = value
    def get_Status(self): return self.Status
    def set_Status(self, Status): self.Status = Status
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NameKeyRef(self): return self.NameKeyRef
    def set_NameKeyRef(self, NameKeyRef): self.NameKeyRef = NameKeyRef
    def get_PersonID(self): return self.PersonID
    def set_PersonID(self, PersonID): self.PersonID = PersonID
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_ValidTo(self): return self.ValidTo
    def set_ValidTo(self, ValidTo): self.ValidTo = ValidTo
    def get_DateValidFrom(self): return self.DateValidFrom
    def set_DateValidFrom(self, DateValidFrom): self.DateValidFrom = DateValidFrom
    def get_label(self): return self.label
    def set_label(self, label): self.label = label
    def get_DateValidTo(self): return self.DateValidTo
    def set_DateValidTo(self, DateValidTo): self.DateValidTo = DateValidTo
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_PersonIDType(self): return self.PersonIDType
    def set_PersonIDType(self, PersonIDType): self.PersonIDType = PersonIDType
    def validate_PersonIDTypeList(self, value):
        # Validate type PersonIDTypeList, a restriction on xs:normalizedString.
        pass
    def get_NameKey(self): return self.NameKey
    def set_NameKey(self, NameKey): self.NameKey = NameKey
    def get_Usage(self): return self.Usage
    def set_Usage(self, Usage): self.Usage = Usage
    def validate_PersonNameUsageList(self, value):
        # Validate type PersonNameUsageList, a restriction on xs:normalizedString.
        pass
    def get_DataQualityType(self): return self.DataQualityType
    def set_DataQualityType(self, DataQualityType): self.DataQualityType = DataQualityType
    def validate_DataQualityTypeList(self, value):
        # Validate type DataQualityTypeList, a restriction on xs:string.
        pass
    def get_ValidFrom(self): return self.ValidFrom
    def set_ValidFrom(self, ValidFrom): self.ValidFrom = ValidFrom
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def validate_PersonNameTypeList(self, value):
        # Validate type PersonNameTypeList, a restriction on xs:normalizedString.
        pass
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            self.NameElement
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PersonNameType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PersonNameType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PersonNameType'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.add(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.add(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (
                                name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (
                                unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (
                                unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.add(name)
                        outfile.write(' %s=%s' % (
                            name, quote_attrib(value), ))
        if self.Status is not None and 'Status' not in already_processed:
            already_processed.add('Status')
            outfile.write(' Status=%s' % (quote_attrib(self.Status), ))
        if self.LanguageCode is not None and 'LanguageCode' not in already_processed:
            already_processed.add('LanguageCode')
            outfile.write(' LanguageCode=%s' % (self.gds_format_string(quote_attrib(self.LanguageCode).encode(ExternalEncoding), input_name='LanguageCode'), ))
        if self.NameKeyRef is not None and 'NameKeyRef' not in already_processed:
            already_processed.add('NameKeyRef')
            outfile.write(' NameKeyRef=%s' % (quote_attrib(self.NameKeyRef), ))
        if self.PersonID is not None and 'PersonID' not in already_processed:
            already_processed.add('PersonID')
            outfile.write(' PersonID=%s' % (quote_attrib(self.PersonID), ))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
        if self.ValidTo is not None and 'ValidTo' not in already_processed:
            already_processed.add('ValidTo')
            outfile.write(' ValidTo="%s"' % self.gds_format_datetime(self.ValidTo, input_name='ValidTo'))
        if self.DateValidFrom is not None and 'DateValidFrom' not in already_processed:
            already_processed.add('DateValidFrom')
            outfile.write(' DateValidFrom="%s"' % self.gds_format_datetime(self.DateValidFrom, input_name='DateValidFrom'))
        if self.label is not None and 'label' not in already_processed:
            already_processed.add('label')
            outfile.write(' label=%s' % (self.gds_format_string(quote_attrib(self.label).encode(ExternalEncoding), input_name='label'), ))
        if self.DateValidTo is not None and 'DateValidTo' not in already_processed:
            already_processed.add('DateValidTo')
            outfile.write(' DateValidTo="%s"' % self.gds_format_datetime(self.DateValidTo, input_name='DateValidTo'))
        if self.href is not None and 'href' not in already_processed:
            already_processed.add('href')
            outfile.write(' href=%s' % (self.gds_format_string(quote_attrib(self.href).encode(ExternalEncoding), input_name='href'), ))
        if self.PersonIDType is not None and 'PersonIDType' not in already_processed:
            already_processed.add('PersonIDType')
            outfile.write(' PersonIDType=%s' % (quote_attrib(self.PersonIDType), ))
        if self.NameKey is not None and 'NameKey' not in already_processed:
            already_processed.add('NameKey')
            outfile.write(' NameKey=%s' % (quote_attrib(self.NameKey), ))
        if self.Usage is not None and 'Usage' not in already_processed:
            already_processed.add('Usage')
            outfile.write(' Usage=%s' % (quote_attrib(self.Usage), ))
        if self.DataQualityType is not None and 'DataQualityType' not in already_processed:
            already_processed.add('DataQualityType')
            outfile.write(' DataQualityType=%s' % (quote_attrib(self.DataQualityType), ))
        if self.ValidFrom is not None and 'ValidFrom' not in already_processed:
            already_processed.add('ValidFrom')
            outfile.write(' ValidFrom="%s"' % self.gds_format_datetime(self.ValidFrom, input_name='ValidFrom'))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (quote_attrib(self.Type), ))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            outfile.write(' ID=%s' % (quote_attrib(self.ID), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='', name_='PersonNameType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for NameElement_ in self.NameElement:
            NameElement_.export(outfile, level, '', name_='NameElement', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='PersonNameType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Status is not None and 'Status' not in already_processed:
            already_processed.add('Status')
            showIndent(outfile, level)
            outfile.write('Status = %s,\n' % (self.Status,))
        if self.LanguageCode is not None and 'LanguageCode' not in already_processed:
            already_processed.add('LanguageCode')
            showIndent(outfile, level)
            outfile.write('LanguageCode = "%s",\n' % (self.LanguageCode,))
        if self.NameKeyRef is not None and 'NameKeyRef' not in already_processed:
            already_processed.add('NameKeyRef')
            showIndent(outfile, level)
            outfile.write('NameKeyRef = %s,\n' % (self.NameKeyRef,))
        if self.PersonID is not None and 'PersonID' not in already_processed:
            already_processed.add('PersonID')
            showIndent(outfile, level)
            outfile.write('PersonID = %s,\n' % (self.PersonID,))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            showIndent(outfile, level)
            outfile.write('type_ = "%s",\n' % (self.type_,))
        if self.ValidTo is not None and 'ValidTo' not in already_processed:
            already_processed.add('ValidTo')
            showIndent(outfile, level)
            outfile.write('ValidTo = "%s",\n' % (self.ValidTo,))
        if self.DateValidFrom is not None and 'DateValidFrom' not in already_processed:
            already_processed.add('DateValidFrom')
            showIndent(outfile, level)
            outfile.write('DateValidFrom = "%s",\n' % (self.DateValidFrom,))
        if self.label is not None and 'label' not in already_processed:
            already_processed.add('label')
            showIndent(outfile, level)
            outfile.write('label = "%s",\n' % (self.label,))
        if self.DateValidTo is not None and 'DateValidTo' not in already_processed:
            already_processed.add('DateValidTo')
            showIndent(outfile, level)
            outfile.write('DateValidTo = "%s",\n' % (self.DateValidTo,))
        if self.href is not None and 'href' not in already_processed:
            already_processed.add('href')
            showIndent(outfile, level)
            outfile.write('href = "%s",\n' % (self.href,))
        if self.PersonIDType is not None and 'PersonIDType' not in already_processed:
            already_processed.add('PersonIDType')
            showIndent(outfile, level)
            outfile.write('PersonIDType = "%s",\n' % (self.PersonIDType,))
        if self.NameKey is not None and 'NameKey' not in already_processed:
            already_processed.add('NameKey')
            showIndent(outfile, level)
            outfile.write('NameKey = %s,\n' % (self.NameKey,))
        if self.Usage is not None and 'Usage' not in already_processed:
            already_processed.add('Usage')
            showIndent(outfile, level)
            outfile.write('Usage = "%s",\n' % (self.Usage,))
        if self.DataQualityType is not None and 'DataQualityType' not in already_processed:
            already_processed.add('DataQualityType')
            showIndent(outfile, level)
            outfile.write('DataQualityType = "%s",\n' % (self.DataQualityType,))
        if self.ValidFrom is not None and 'ValidFrom' not in already_processed:
            already_processed.add('ValidFrom')
            showIndent(outfile, level)
            outfile.write('ValidFrom = "%s",\n' % (self.ValidFrom,))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            showIndent(outfile, level)
            outfile.write('Type = "%s",\n' % (self.Type,))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            showIndent(outfile, level)
            outfile.write('ID = %s,\n' % (self.ID,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('NameElement=[\n')
        level += 1
        for NameElement_ in self.NameElement:
            showIndent(outfile, level)
            outfile.write('model_.NameElementType(\n')
            NameElement_.exportLiteral(outfile, level, name_='NameElementType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Status', node)
        if value is not None and 'Status' not in already_processed:
            already_processed.add('Status')
            self.Status = value
        value = find_attr_value_('LanguageCode', node)
        if value is not None and 'LanguageCode' not in already_processed:
            already_processed.add('LanguageCode')
            self.LanguageCode = value
        value = find_attr_value_('NameKeyRef', node)
        if value is not None and 'NameKeyRef' not in already_processed:
            already_processed.add('NameKeyRef')
            self.NameKeyRef = value
        value = find_attr_value_('PersonID', node)
        if value is not None and 'PersonID' not in already_processed:
            already_processed.add('PersonID')
            self.PersonID = value
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
        value = find_attr_value_('ValidTo', node)
        if value is not None and 'ValidTo' not in already_processed:
            already_processed.add('ValidTo')
            try:
                self.ValidTo = self.gds_parse_datetime(value, node, 'ValidTo')
            except ValueError, exp:
                raise ValueError('Bad date-time attribute (ValidTo): %s' % exp)
        value = find_attr_value_('DateValidFrom', node)
        if value is not None and 'DateValidFrom' not in already_processed:
            already_processed.add('DateValidFrom')
            try:
                self.DateValidFrom = self.gds_parse_datetime(value, node, 'DateValidFrom')
            except ValueError, exp:
                raise ValueError('Bad date-time attribute (DateValidFrom): %s' % exp)
        value = find_attr_value_('label', node)
        if value is not None and 'label' not in already_processed:
            already_processed.add('label')
            self.label = value
        value = find_attr_value_('DateValidTo', node)
        if value is not None and 'DateValidTo' not in already_processed:
            already_processed.add('DateValidTo')
            try:
                self.DateValidTo = self.gds_parse_datetime(value, node, 'DateValidTo')
            except ValueError, exp:
                raise ValueError('Bad date-time attribute (DateValidTo): %s' % exp)
        value = find_attr_value_('href', node)
        if value is not None and 'href' not in already_processed:
            already_processed.add('href')
            self.href = value
        value = find_attr_value_('PersonIDType', node)
        if value is not None and 'PersonIDType' not in already_processed:
            already_processed.add('PersonIDType')
            self.PersonIDType = value
            self.validate_PersonIDTypeList(self.PersonIDType)    # validate type PersonIDTypeList
        value = find_attr_value_('NameKey', node)
        if value is not None and 'NameKey' not in already_processed:
            already_processed.add('NameKey')
            self.NameKey = value
        value = find_attr_value_('Usage', node)
        if value is not None and 'Usage' not in already_processed:
            already_processed.add('Usage')
            self.Usage = value
            self.validate_PersonNameUsageList(self.Usage)    # validate type PersonNameUsageList
        value = find_attr_value_('DataQualityType', node)
        if value is not None and 'DataQualityType' not in already_processed:
            already_processed.add('DataQualityType')
            self.DataQualityType = value
            self.validate_DataQualityTypeList(self.DataQualityType)    # validate type DataQualityTypeList
        value = find_attr_value_('ValidFrom', node)
        if value is not None and 'ValidFrom' not in already_processed:
            already_processed.add('ValidFrom')
            try:
                self.ValidFrom = self.gds_parse_datetime(value, node, 'ValidFrom')
            except ValueError, exp:
                raise ValueError('Bad date-time attribute (ValidFrom): %s' % exp)
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
            self.validate_PersonNameTypeList(self.Type)    # validate type PersonNameTypeList
        value = find_attr_value_('ID', node)
        if value is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            self.ID = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NameElement':
            obj_ = NameElementType.factory()
            obj_.build(child_)
            self.NameElement.append(obj_)
# end class PersonNameType

class OrganisationNameType(GeneratedsSuper):
    """Reusable complex typeEnumerated list of common types of aliases or
    name types.A unique identifier of an organisationType of
    identifierGlobally unique identiferUsage of organisation name.
    How is it used and for what purpose. Allows user which name in a
    set of names to select for a given purpose. e.g. used for legal
    purposesStatus of the entity. e.g. Old, Current, Inactive,
    Active, etc"""
    subclass = None
    superclass = None
    def __init__(self, Status=None, LanguageCode=None, NameKeyRef=None, type_=None, ValidTo=None, DateValidFrom=None, label=None, DateValidTo=None, href=None, ValidFrom=None, NameKey=None, Usage=None, DataQualityType=None, OrganisationID=None, Type=None, ID=None, OrganisationIDType=None, NameElement=None, SubDivisionName=None, extensiontype_=None):
        self.Status = _cast(None, Status)
        self.LanguageCode = _cast(None, LanguageCode)
        self.NameKeyRef = _cast(None, NameKeyRef)
        self.type_ = _cast(None, type_)
        self.ValidTo = _cast(None, ValidTo)
        self.DateValidFrom = _cast(None, DateValidFrom)
        self.label = _cast(None, label)
        self.DateValidTo = _cast(None, DateValidTo)
        self.href = _cast(None, href)
        self.ValidFrom = _cast(None, ValidFrom)
        self.NameKey = _cast(None, NameKey)
        self.Usage = _cast(None, Usage)
        self.DataQualityType = _cast(None, DataQualityType)
        self.OrganisationID = _cast(None, OrganisationID)
        self.Type = _cast(None, Type)
        self.ID = _cast(None, ID)
        self.OrganisationIDType = _cast(None, OrganisationIDType)
        if NameElement is None:
            self.NameElement = []
        else:
            self.NameElement = NameElement
        if SubDivisionName is None:
            self.SubDivisionName = []
        else:
            self.SubDivisionName = SubDivisionName
        self.anyAttributes_ = {}
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if OrganisationNameType.subclass:
            return OrganisationNameType.subclass(*args_, **kwargs_)
        else:
            return OrganisationNameType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NameElement(self): return self.NameElement
    def set_NameElement(self, NameElement): self.NameElement = NameElement
    def add_NameElement(self, value): self.NameElement.append(value)
    def insert_NameElement(self, index, value): self.NameElement[index] = value
    def get_SubDivisionName(self): return self.SubDivisionName
    def set_SubDivisionName(self, SubDivisionName): self.SubDivisionName = SubDivisionName
    def add_SubDivisionName(self, value): self.SubDivisionName.append(value)
    def insert_SubDivisionName(self, index, value): self.SubDivisionName[index] = value
    def get_Status(self): return self.Status
    def set_Status(self, Status): self.Status = Status
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_NameKeyRef(self): return self.NameKeyRef
    def set_NameKeyRef(self, NameKeyRef): self.NameKeyRef = NameKeyRef
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_ValidTo(self): return self.ValidTo
    def set_ValidTo(self, ValidTo): self.ValidTo = ValidTo
    def get_DateValidFrom(self): return self.DateValidFrom
    def set_DateValidFrom(self, DateValidFrom): self.DateValidFrom = DateValidFrom
    def get_label(self): return self.label
    def set_label(self, label): self.label = label
    def get_DateValidTo(self): return self.DateValidTo
    def set_DateValidTo(self, DateValidTo): self.DateValidTo = DateValidTo
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_ValidFrom(self): return self.ValidFrom
    def set_ValidFrom(self, ValidFrom): self.ValidFrom = ValidFrom
    def get_NameKey(self): return self.NameKey
    def set_NameKey(self, NameKey): self.NameKey = NameKey
    def get_Usage(self): return self.Usage
    def set_Usage(self, Usage): self.Usage = Usage
    def validate_OrganisationNameUsageList(self, value):
        # Validate type OrganisationNameUsageList, a restriction on xs:normalizedString.
        pass
    def get_DataQualityType(self): return self.DataQualityType
    def set_DataQualityType(self, DataQualityType): self.DataQualityType = DataQualityType
    def validate_DataQualityTypeList(self, value):
        # Validate type DataQualityTypeList, a restriction on xs:string.
        pass
    def get_OrganisationID(self): return self.OrganisationID
    def set_OrganisationID(self, OrganisationID): self.OrganisationID = OrganisationID
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def validate_OrganisationNameTypeList(self, value):
        # Validate type OrganisationNameTypeList, a restriction on xs:normalizedString.
        pass
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def get_OrganisationIDType(self): return self.OrganisationIDType
    def set_OrganisationIDType(self, OrganisationIDType): self.OrganisationIDType = OrganisationIDType
    def validate_OrganisationIDTypeList(self, value):
        # Validate type OrganisationIDTypeList, a restriction on xs:normalizedString.
        pass
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            self.NameElement or
            self.SubDivisionName
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OrganisationNameType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OrganisationNameType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OrganisationNameType'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.add(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.add(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (
                                name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:yyy%d="%s"' % (
                                unique_counter, namespace, ))
                            outfile.write(' yyy%d:%s=%s' % (
                                unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.add(name)
                        outfile.write(' %s=%s' % (
                            name, quote_attrib(value), ))
        if self.Status is not None and 'Status' not in already_processed:
            already_processed.add('Status')
            outfile.write(' Status=%s' % (quote_attrib(self.Status), ))
        if self.LanguageCode is not None and 'LanguageCode' not in already_processed:
            already_processed.add('LanguageCode')
            outfile.write(' LanguageCode=%s' % (self.gds_format_string(quote_attrib(self.LanguageCode).encode(ExternalEncoding), input_name='LanguageCode'), ))
        if self.NameKeyRef is not None and 'NameKeyRef' not in already_processed:
            already_processed.add('NameKeyRef')
            outfile.write(' NameKeyRef=%s' % (quote_attrib(self.NameKeyRef), ))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
        if self.ValidTo is not None and 'ValidTo' not in already_processed:
            already_processed.add('ValidTo')
            outfile.write(' ValidTo="%s"' % self.gds_format_datetime(self.ValidTo, input_name='ValidTo'))
        if self.DateValidFrom is not None and 'DateValidFrom' not in already_processed:
            already_processed.add('DateValidFrom')
            outfile.write(' DateValidFrom="%s"' % self.gds_format_datetime(self.DateValidFrom, input_name='DateValidFrom'))
        if self.label is not None and 'label' not in already_processed:
            already_processed.add('label')
            outfile.write(' label=%s' % (self.gds_format_string(quote_attrib(self.label).encode(ExternalEncoding), input_name='label'), ))
        if self.DateValidTo is not None and 'DateValidTo' not in already_processed:
            already_processed.add('DateValidTo')
            outfile.write(' DateValidTo="%s"' % self.gds_format_datetime(self.DateValidTo, input_name='DateValidTo'))
        if self.href is not None and 'href' not in already_processed:
            already_processed.add('href')
            outfile.write(' href=%s' % (self.gds_format_string(quote_attrib(self.href).encode(ExternalEncoding), input_name='href'), ))
        if self.ValidFrom is not None and 'ValidFrom' not in already_processed:
            already_processed.add('ValidFrom')
            outfile.write(' ValidFrom="%s"' % self.gds_format_datetime(self.ValidFrom, input_name='ValidFrom'))
        if self.NameKey is not None and 'NameKey' not in already_processed:
            already_processed.add('NameKey')
            outfile.write(' NameKey=%s' % (quote_attrib(self.NameKey), ))
        if self.Usage is not None and 'Usage' not in already_processed:
            already_processed.add('Usage')
            outfile.write(' Usage=%s' % (quote_attrib(self.Usage), ))
        if self.DataQualityType is not None and 'DataQualityType' not in already_processed:
            already_processed.add('DataQualityType')
            outfile.write(' DataQualityType=%s' % (quote_attrib(self.DataQualityType), ))
        if self.OrganisationID is not None and 'OrganisationID' not in already_processed:
            already_processed.add('OrganisationID')
            outfile.write(' OrganisationID=%s' % (quote_attrib(self.OrganisationID), ))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (quote_attrib(self.Type), ))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            outfile.write(' ID=%s' % (quote_attrib(self.ID), ))
        if self.OrganisationIDType is not None and 'OrganisationIDType' not in already_processed:
            already_processed.add('OrganisationIDType')
            outfile.write(' OrganisationIDType=%s' % (quote_attrib(self.OrganisationIDType), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='', name_='OrganisationNameType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for NameElement_ in self.NameElement:
            NameElement_.export(outfile, level, '', name_='NameElement', pretty_print=pretty_print)
        for SubDivisionName_ in self.SubDivisionName:
            SubDivisionName_.export(outfile, level, '', name_='SubDivisionName', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='OrganisationNameType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Status is not None and 'Status' not in already_processed:
            already_processed.add('Status')
            showIndent(outfile, level)
            outfile.write('Status = %s,\n' % (self.Status,))
        if self.LanguageCode is not None and 'LanguageCode' not in already_processed:
            already_processed.add('LanguageCode')
            showIndent(outfile, level)
            outfile.write('LanguageCode = "%s",\n' % (self.LanguageCode,))
        if self.NameKeyRef is not None and 'NameKeyRef' not in already_processed:
            already_processed.add('NameKeyRef')
            showIndent(outfile, level)
            outfile.write('NameKeyRef = %s,\n' % (self.NameKeyRef,))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            showIndent(outfile, level)
            outfile.write('type_ = "%s",\n' % (self.type_,))
        if self.ValidTo is not None and 'ValidTo' not in already_processed:
            already_processed.add('ValidTo')
            showIndent(outfile, level)
            outfile.write('ValidTo = "%s",\n' % (self.ValidTo,))
        if self.DateValidFrom is not None and 'DateValidFrom' not in already_processed:
            already_processed.add('DateValidFrom')
            showIndent(outfile, level)
            outfile.write('DateValidFrom = "%s",\n' % (self.DateValidFrom,))
        if self.label is not None and 'label' not in already_processed:
            already_processed.add('label')
            showIndent(outfile, level)
            outfile.write('label = "%s",\n' % (self.label,))
        if self.DateValidTo is not None and 'DateValidTo' not in already_processed:
            already_processed.add('DateValidTo')
            showIndent(outfile, level)
            outfile.write('DateValidTo = "%s",\n' % (self.DateValidTo,))
        if self.href is not None and 'href' not in already_processed:
            already_processed.add('href')
            showIndent(outfile, level)
            outfile.write('href = "%s",\n' % (self.href,))
        if self.ValidFrom is not None and 'ValidFrom' not in already_processed:
            already_processed.add('ValidFrom')
            showIndent(outfile, level)
            outfile.write('ValidFrom = "%s",\n' % (self.ValidFrom,))
        if self.NameKey is not None and 'NameKey' not in already_processed:
            already_processed.add('NameKey')
            showIndent(outfile, level)
            outfile.write('NameKey = %s,\n' % (self.NameKey,))
        if self.Usage is not None and 'Usage' not in already_processed:
            already_processed.add('Usage')
            showIndent(outfile, level)
            outfile.write('Usage = "%s",\n' % (self.Usage,))
        if self.DataQualityType is not None and 'DataQualityType' not in already_processed:
            already_processed.add('DataQualityType')
            showIndent(outfile, level)
            outfile.write('DataQualityType = "%s",\n' % (self.DataQualityType,))
        if self.OrganisationID is not None and 'OrganisationID' not in already_processed:
            already_processed.add('OrganisationID')
            showIndent(outfile, level)
            outfile.write('OrganisationID = %s,\n' % (self.OrganisationID,))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            showIndent(outfile, level)
            outfile.write('Type = "%s",\n' % (self.Type,))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            showIndent(outfile, level)
            outfile.write('ID = %s,\n' % (self.ID,))
        if self.OrganisationIDType is not None and 'OrganisationIDType' not in already_processed:
            already_processed.add('OrganisationIDType')
            showIndent(outfile, level)
            outfile.write('OrganisationIDType = "%s",\n' % (self.OrganisationIDType,))
        for name, value in self.anyAttributes_.items():
            showIndent(outfile, level)
            outfile.write('%s = "%s",\n' % (name, value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('NameElement=[\n')
        level += 1
        for NameElement_ in self.NameElement:
            showIndent(outfile, level)
            outfile.write('model_.NameElementType6(\n')
            NameElement_.exportLiteral(outfile, level, name_='NameElementType6')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SubDivisionName=[\n')
        level += 1
        for SubDivisionName_ in self.SubDivisionName:
            showIndent(outfile, level)
            outfile.write('model_.SubDivisionNameType(\n')
            SubDivisionName_.exportLiteral(outfile, level, name_='SubDivisionNameType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Status', node)
        if value is not None and 'Status' not in already_processed:
            already_processed.add('Status')
            self.Status = value
        value = find_attr_value_('LanguageCode', node)
        if value is not None and 'LanguageCode' not in already_processed:
            already_processed.add('LanguageCode')
            self.LanguageCode = value
        value = find_attr_value_('NameKeyRef', node)
        if value is not None and 'NameKeyRef' not in already_processed:
            already_processed.add('NameKeyRef')
            self.NameKeyRef = value
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
        value = find_attr_value_('ValidTo', node)
        if value is not None and 'ValidTo' not in already_processed:
            already_processed.add('ValidTo')
            try:
                self.ValidTo = self.gds_parse_datetime(value, node, 'ValidTo')
            except ValueError, exp:
                raise ValueError('Bad date-time attribute (ValidTo): %s' % exp)
        value = find_attr_value_('DateValidFrom', node)
        if value is not None and 'DateValidFrom' not in already_processed:
            already_processed.add('DateValidFrom')
            try:
                self.DateValidFrom = self.gds_parse_datetime(value, node, 'DateValidFrom')
            except ValueError, exp:
                raise ValueError('Bad date-time attribute (DateValidFrom): %s' % exp)
        value = find_attr_value_('label', node)
        if value is not None and 'label' not in already_processed:
            already_processed.add('label')
            self.label = value
        value = find_attr_value_('DateValidTo', node)
        if value is not None and 'DateValidTo' not in already_processed:
            already_processed.add('DateValidTo')
            try:
                self.DateValidTo = self.gds_parse_datetime(value, node, 'DateValidTo')
            except ValueError, exp:
                raise ValueError('Bad date-time attribute (DateValidTo): %s' % exp)
        value = find_attr_value_('href', node)
        if value is not None and 'href' not in already_processed:
            already_processed.add('href')
            self.href = value
        value = find_attr_value_('ValidFrom', node)
        if value is not None and 'ValidFrom' not in already_processed:
            already_processed.add('ValidFrom')
            try:
                self.ValidFrom = self.gds_parse_datetime(value, node, 'ValidFrom')
            except ValueError, exp:
                raise ValueError('Bad date-time attribute (ValidFrom): %s' % exp)
        value = find_attr_value_('NameKey', node)
        if value is not None and 'NameKey' not in already_processed:
            already_processed.add('NameKey')
            self.NameKey = value
        value = find_attr_value_('Usage', node)
        if value is not None and 'Usage' not in already_processed:
            already_processed.add('Usage')
            self.Usage = value
            self.validate_OrganisationNameUsageList(self.Usage)    # validate type OrganisationNameUsageList
        value = find_attr_value_('DataQualityType', node)
        if value is not None and 'DataQualityType' not in already_processed:
            already_processed.add('DataQualityType')
            self.DataQualityType = value
            self.validate_DataQualityTypeList(self.DataQualityType)    # validate type DataQualityTypeList
        value = find_attr_value_('OrganisationID', node)
        if value is not None and 'OrganisationID' not in already_processed:
            already_processed.add('OrganisationID')
            self.OrganisationID = value
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
            self.validate_OrganisationNameTypeList(self.Type)    # validate type OrganisationNameTypeList
        value = find_attr_value_('ID', node)
        if value is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            self.ID = value
        value = find_attr_value_('OrganisationIDType', node)
        if value is not None and 'OrganisationIDType' not in already_processed:
            already_processed.add('OrganisationIDType')
            self.OrganisationIDType = value
            self.validate_OrganisationIDTypeList(self.OrganisationIDType)    # validate type OrganisationIDTypeList
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NameElement':
            obj_ = NameElementType6.factory()
            obj_.build(child_)
            self.NameElement.append(obj_)
        elif nodeName_ == 'SubDivisionName':
            obj_ = SubDivisionNameType.factory()
            obj_.build(child_)
            self.SubDivisionName.append(obj_)
# end class OrganisationNameType

class PersonNameType1(PersonNameType):
    subclass = None
    superclass = PersonNameType
    def __init__(self, Status=None, LanguageCode=None, NameKeyRef=None, PersonID=None, type_=None, ValidTo=None, DateValidFrom=None, label=None, DateValidTo=None, href=None, PersonIDType=None, NameKey=None, Usage=None, DataQualityType=None, ValidFrom=None, Type=None, ID=None, NameElement=None):
        super(PersonNameType1, self).__init__(Status, LanguageCode, NameKeyRef, PersonID, type_, ValidTo, DateValidFrom, label, DateValidTo, href, PersonIDType, NameKey, Usage, DataQualityType, ValidFrom, Type, ID, NameElement, )
        pass
    def factory(*args_, **kwargs_):
        if PersonNameType1.subclass:
            return PersonNameType1.subclass(*args_, **kwargs_)
        else:
            return PersonNameType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            super(PersonNameType1, self).hasContent_()
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PersonNameType1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PersonNameType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PersonNameType1'):
        super(PersonNameType1, self).exportAttributes(outfile, level, already_processed, namespace_, name_='PersonNameType1')
    def exportChildren(self, outfile, level, namespace_='', name_='PersonNameType1', fromsubclass_=False, pretty_print=True):
        super(PersonNameType1, self).exportChildren(outfile, level, '', name_, True, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='PersonNameType1'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(PersonNameType1, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(PersonNameType1, self).exportLiteralChildren(outfile, level, name_)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        super(PersonNameType1, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(PersonNameType1, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class PersonNameType1

class OrganisationNameType3(OrganisationNameType):
    subclass = None
    superclass = OrganisationNameType
    def __init__(self, Status=None, LanguageCode=None, NameKeyRef=None, type_=None, ValidTo=None, DateValidFrom=None, label=None, DateValidTo=None, href=None, ValidFrom=None, NameKey=None, Usage=None, DataQualityType=None, OrganisationID=None, Type=None, ID=None, OrganisationIDType=None, NameElement=None, SubDivisionName=None):
        super(OrganisationNameType3, self).__init__(Status, LanguageCode, NameKeyRef, type_, ValidTo, DateValidFrom, label, DateValidTo, href, ValidFrom, NameKey, Usage, DataQualityType, OrganisationID, Type, ID, OrganisationIDType, NameElement, SubDivisionName, )
        pass
    def factory(*args_, **kwargs_):
        if OrganisationNameType3.subclass:
            return OrganisationNameType3.subclass(*args_, **kwargs_)
        else:
            return OrganisationNameType3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            super(OrganisationNameType3, self).hasContent_()
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OrganisationNameType3', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OrganisationNameType3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OrganisationNameType3'):
        super(OrganisationNameType3, self).exportAttributes(outfile, level, already_processed, namespace_, name_='OrganisationNameType3')
    def exportChildren(self, outfile, level, namespace_='', name_='OrganisationNameType3', fromsubclass_=False, pretty_print=True):
        super(OrganisationNameType3, self).exportChildren(outfile, level, '', name_, True, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='OrganisationNameType3'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(OrganisationNameType3, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(OrganisationNameType3, self).exportLiteralChildren(outfile, level, name_)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        super(OrganisationNameType3, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(OrganisationNameType3, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class OrganisationNameType3

GDSClassesMapping = {
}

USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)

def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass

def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'PartyNameType'
        rootClass = PartyNameType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag,
        namespacedef_='',
        pretty_print=True)
    return rootObj

def parseEtree(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'PartyNameType'
        rootClass = PartyNameType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    rootElement = rootObj.to_etree(None, name_=rootTag)
    content = etree_.tostring(rootElement, pretty_print=True,
        xml_declaration=True, encoding="utf-8")
    sys.stdout.write(content)
    sys.stdout.write('\n')
    return rootObj, rootElement

def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'PartyNameType'
        rootClass = PartyNameType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="PartyNameType",
        namespacedef_='')
    return rootObj

def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'PartyNameType'
        rootClass = PartyNameType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from xNL import *\n\n')
    sys.stdout.write('from datetime import datetime as datetime_\n\n')
    sys.stdout.write('import xNL as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj

def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()

if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

__all__ = [
    "PartyNameType",
    "PersonNameType",
    "OrganisationNameType"
    "PersonNameType1",
    "OrganisationNameType3",
    ]