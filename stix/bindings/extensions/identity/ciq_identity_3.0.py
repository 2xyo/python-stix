#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Apr 11 15:07:45 2013 by generateDS.py version 2.9a.
#

import sys
import getopt
import re as re_

import stix_common
import xpil
import base64
from datetime import datetime, tzinfo, timedelta

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError(
                        "Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(tzinfo):
            def __init__(self, offset, name):
                self.__offset = timedelta(minutes = offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return input_data
        def gds_validate_datetime(self, input_data, node, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = input_data.strftime('%Y-%m-%dT%H:%M:%S')
            else:
                _svalue = input_data.strftime('%Y-%m-%dT%H:%M:%S.%f')
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_parse_datetime(self, input_data, node, input_name=''):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'GMT')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime.strptime(
                        input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime.strptime(
                        input_data, '%Y-%m-%dT%H:%M:%S')
            return dt.replace(tzinfo = tz)

        def gds_validate_date(self, input_data, node, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = input_data.strftime('%Y-%m-%d')
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_parse_date(self, input_data, node, input_name=''):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'GMT')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            return datetime.strptime(input_data,
                '%Y-%m-%d').replace(tzinfo = tz)
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (
            msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' %
                (self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n'
                % (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n'
                % (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class STIXCIQIdentity3_0Type(GeneratedsSuper):
    """The STIXCIQIdentityType provides a restriction and minor extension
    of the imported OASIS CIQ-PIL xpil.PartyType for use in
    characterizing STIX Identities.Type of Party. e.g. Person or an
    organisation. An organisation could be university, college,
    club, association, company, etc"""
    subclass = None
    superclass = None
    def __init__(self, xpil.PartyType=None, FreeTextLines=None, PartyName=None, Addresses=None, Accounts=None, ContactNumbers=None, Documents=None, ElectronicAddressIdentifiers=None, Events=None, Identifiers=None, Memberships=None, Relationships=None, Revenues=None, Stocks=None, Vehicles=None, OrganisationInfo=None, PersonInfo=None, BirthInfo=None, CountriesOfResidence=None, Favourites=None, Habits=None, Hobbies=None, Languages=None, Nationalities=None, Occupations=None, PhysicalInfo=None, Preferences=None, Qualifications=None, Visas=None):
        self.xpil.PartyType = _cast(None, xpil.PartyType)
        self.FreeTextLines = FreeTextLines
        self.PartyName = PartyName
        self.Addresses = Addresses
        self.Accounts = Accounts
        self.ContactNumbers = ContactNumbers
        self.Documents = Documents
        self.ElectronicAddressIdentifiers = ElectronicAddressIdentifiers
        self.Events = Events
        self.Identifiers = Identifiers
        self.Memberships = Memberships
        self.Relationships = Relationships
        self.Revenues = Revenues
        self.Stocks = Stocks
        self.Vehicles = Vehicles
        self.OrganisationInfo = OrganisationInfo
        self.PersonInfo = PersonInfo
        self.BirthInfo = BirthInfo
        self.CountriesOfResidence = CountriesOfResidence
        self.Favourites = Favourites
        self.Habits = Habits
        self.Hobbies = Hobbies
        self.Languages = Languages
        self.Nationalities = Nationalities
        self.Occupations = Occupations
        self.PhysicalInfo = PhysicalInfo
        self.Preferences = Preferences
        self.Qualifications = Qualifications
        self.Visas = Visas
    def factory(*args_, **kwargs_):
        if STIXCIQIdentity3_0Type.subclass:
            return STIXCIQIdentity3_0Type.subclass(*args_, **kwargs_)
        else:
            return STIXCIQIdentity3_0Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FreeTextLines(self): return self.FreeTextLines
    def set_FreeTextLines(self, FreeTextLines): self.FreeTextLines = FreeTextLines
    def get_PartyName(self): return self.PartyName
    def set_PartyName(self, PartyName): self.PartyName = PartyName
    def get_Addresses(self): return self.Addresses
    def set_Addresses(self, Addresses): self.Addresses = Addresses
    def get_Accounts(self): return self.Accounts
    def set_Accounts(self, Accounts): self.Accounts = Accounts
    def get_ContactNumbers(self): return self.ContactNumbers
    def set_ContactNumbers(self, ContactNumbers): self.ContactNumbers = ContactNumbers
    def get_Documents(self): return self.Documents
    def set_Documents(self, Documents): self.Documents = Documents
    def get_ElectronicAddressIdentifiers(self): return self.ElectronicAddressIdentifiers
    def set_ElectronicAddressIdentifiers(self, ElectronicAddressIdentifiers): self.ElectronicAddressIdentifiers = ElectronicAddressIdentifiers
    def get_Events(self): return self.Events
    def set_Events(self, Events): self.Events = Events
    def get_Identifiers(self): return self.Identifiers
    def set_Identifiers(self, Identifiers): self.Identifiers = Identifiers
    def get_Memberships(self): return self.Memberships
    def set_Memberships(self, Memberships): self.Memberships = Memberships
    def get_Relationships(self): return self.Relationships
    def set_Relationships(self, Relationships): self.Relationships = Relationships
    def get_Revenues(self): return self.Revenues
    def set_Revenues(self, Revenues): self.Revenues = Revenues
    def get_Stocks(self): return self.Stocks
    def set_Stocks(self, Stocks): self.Stocks = Stocks
    def get_Vehicles(self): return self.Vehicles
    def set_Vehicles(self, Vehicles): self.Vehicles = Vehicles
    def get_OrganisationInfo(self): return self.OrganisationInfo
    def set_OrganisationInfo(self, OrganisationInfo): self.OrganisationInfo = OrganisationInfo
    def get_PersonInfo(self): return self.PersonInfo
    def set_PersonInfo(self, PersonInfo): self.PersonInfo = PersonInfo
    def get_BirthInfo(self): return self.BirthInfo
    def set_BirthInfo(self, BirthInfo): self.BirthInfo = BirthInfo
    def get_CountriesOfResidence(self): return self.CountriesOfResidence
    def set_CountriesOfResidence(self, CountriesOfResidence): self.CountriesOfResidence = CountriesOfResidence
    def get_Favourites(self): return self.Favourites
    def set_Favourites(self, Favourites): self.Favourites = Favourites
    def get_Habits(self): return self.Habits
    def set_Habits(self, Habits): self.Habits = Habits
    def get_Hobbies(self): return self.Hobbies
    def set_Hobbies(self, Hobbies): self.Hobbies = Hobbies
    def get_Languages(self): return self.Languages
    def set_Languages(self, Languages): self.Languages = Languages
    def get_Nationalities(self): return self.Nationalities
    def set_Nationalities(self, Nationalities): self.Nationalities = Nationalities
    def get_Occupations(self): return self.Occupations
    def set_Occupations(self, Occupations): self.Occupations = Occupations
    def get_PhysicalInfo(self): return self.PhysicalInfo
    def set_PhysicalInfo(self, PhysicalInfo): self.PhysicalInfo = PhysicalInfo
    def get_Preferences(self): return self.Preferences
    def set_Preferences(self, Preferences): self.Preferences = Preferences
    def get_Qualifications(self): return self.Qualifications
    def set_Qualifications(self, Qualifications): self.Qualifications = Qualifications
    def get_Visas(self): return self.Visas
    def set_Visas(self, Visas): self.Visas = Visas
    def get_PartyType(self): return self.xpil.PartyType
    def set_PartyType(self, xpil.PartyType): self.xpil.PartyType = xpil.PartyType
    def hasContent_(self):
        if (
            self.FreeTextLines is not None or
            self.PartyName is not None or
            self.Addresses is not None or
            self.Accounts is not None or
            self.ContactNumbers is not None or
            self.Documents is not None or
            self.ElectronicAddressIdentifiers is not None or
            self.Events is not None or
            self.Identifiers is not None or
            self.Memberships is not None or
            self.Relationships is not None or
            self.Revenues is not None or
            self.Stocks is not None or
            self.Vehicles is not None or
            self.OrganisationInfo is not None or
            self.PersonInfo is not None or
            self.BirthInfo is not None or
            self.CountriesOfResidence is not None or
            self.Favourites is not None or
            self.Habits is not None or
            self.Hobbies is not None or
            self.Languages is not None or
            self.Nationalities is not None or
            self.Occupations is not None or
            self.PhysicalInfo is not None or
            self.Preferences is not None or
            self.Qualifications is not None or
            self.Visas is not None
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='STIXCIQIdentity3.0Type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='STIXCIQIdentity3.0Type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='STIXCIQIdentity3.0Type'):
        if self.xpil.PartyType is not None and 'xpil.PartyType' not in already_processed:
            already_processed.add('xpil.PartyType')
            outfile.write(' xpil.PartyType=%s' % (quote_attrib(self.xpil.PartyType), ))
    def exportChildren(self, outfile, level, namespace_='', name_='STIXCIQIdentity3.0Type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FreeTextLines is not None:
            self.FreeTextLines.export(outfile, level, '', name_='FreeTextLines', pretty_print=pretty_print)
        if self.PartyName is not None:
            self.PartyName.export(outfile, level, '', name_='PartyName', pretty_print=pretty_print)
        if self.Addresses is not None:
            self.Addresses.export(outfile, level, '', name_='Addresses', pretty_print=pretty_print)
        if self.Accounts is not None:
            self.Accounts.export(outfile, level, '', name_='Accounts', pretty_print=pretty_print)
        if self.ContactNumbers is not None:
            self.ContactNumbers.export(outfile, level, '', name_='ContactNumbers', pretty_print=pretty_print)
        if self.Documents is not None:
            self.Documents.export(outfile, level, '', name_='Documents', pretty_print=pretty_print)
        if self.ElectronicAddressIdentifiers is not None:
            self.ElectronicAddressIdentifiers.export(outfile, level, '', name_='ElectronicAddressIdentifiers', pretty_print=pretty_print)
        if self.Events is not None:
            self.Events.export(outfile, level, '', name_='Events', pretty_print=pretty_print)
        if self.Identifiers is not None:
            self.Identifiers.export(outfile, level, '', name_='Identifiers', pretty_print=pretty_print)
        if self.Memberships is not None:
            self.Memberships.export(outfile, level, '', name_='Memberships', pretty_print=pretty_print)
        if self.Relationships is not None:
            self.Relationships.export(outfile, level, '', name_='Relationships', pretty_print=pretty_print)
        if self.Revenues is not None:
            self.Revenues.export(outfile, level, '', name_='Revenues', pretty_print=pretty_print)
        if self.Stocks is not None:
            self.Stocks.export(outfile, level, '', name_='Stocks', pretty_print=pretty_print)
        if self.Vehicles is not None:
            self.Vehicles.export(outfile, level, '', name_='Vehicles', pretty_print=pretty_print)
        if self.OrganisationInfo is not None:
            self.OrganisationInfo.export(outfile, level, '', name_='OrganisationInfo', pretty_print=pretty_print)
        if self.PersonInfo is not None:
            self.PersonInfo.export(outfile, level, '', name_='PersonInfo', pretty_print=pretty_print)
        if self.BirthInfo is not None:
            self.BirthInfo.export(outfile, level, '', name_='BirthInfo', pretty_print=pretty_print)
        if self.CountriesOfResidence is not None:
            self.CountriesOfResidence.export(outfile, level, '', name_='CountriesOfResidence', pretty_print=pretty_print)
        if self.Favourites is not None:
            self.Favourites.export(outfile, level, '', name_='Favourites', pretty_print=pretty_print)
        if self.Habits is not None:
            self.Habits.export(outfile, level, '', name_='Habits', pretty_print=pretty_print)
        if self.Hobbies is not None:
            self.Hobbies.export(outfile, level, '', name_='Hobbies', pretty_print=pretty_print)
        if self.Languages is not None:
            self.Languages.export(outfile, level, '', name_='Languages', pretty_print=pretty_print)
        if self.Nationalities is not None:
            self.Nationalities.export(outfile, level, '', name_='Nationalities', pretty_print=pretty_print)
        if self.Occupations is not None:
            self.Occupations.export(outfile, level, '', name_='Occupations', pretty_print=pretty_print)
        if self.PhysicalInfo is not None:
            self.PhysicalInfo.export(outfile, level, '', name_='PhysicalInfo', pretty_print=pretty_print)
        if self.Preferences is not None:
            self.Preferences.export(outfile, level, '', name_='Preferences', pretty_print=pretty_print)
        if self.Qualifications is not None:
            self.Qualifications.export(outfile, level, '', name_='Qualifications', pretty_print=pretty_print)
        if self.Visas is not None:
            self.Visas.export(outfile, level, '', name_='Visas', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='STIXCIQIdentity3.0Type'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.xpil.PartyType is not None and 'xpil.PartyType' not in already_processed:
            already_processed.add('xpil.PartyType')
            showIndent(outfile, level)
            outfile.write('xpil.PartyType = %s,\n' % (self.xpil.PartyType,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.FreeTextLines is not None:
            showIndent(outfile, level)
            outfile.write('FreeTextLines=model_.FreeTextLines(\n')
            self.FreeTextLines.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PartyName is not None:
            showIndent(outfile, level)
            outfile.write('PartyName=model_.PartyName(\n')
            self.PartyName.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Addresses is not None:
            showIndent(outfile, level)
            outfile.write('Addresses=model_.Addresses(\n')
            self.Addresses.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Accounts is not None:
            showIndent(outfile, level)
            outfile.write('Accounts=model_.Accounts(\n')
            self.Accounts.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ContactNumbers is not None:
            showIndent(outfile, level)
            outfile.write('ContactNumbers=model_.ContactNumbers(\n')
            self.ContactNumbers.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Documents is not None:
            showIndent(outfile, level)
            outfile.write('Documents=model_.Documents(\n')
            self.Documents.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ElectronicAddressIdentifiers is not None:
            showIndent(outfile, level)
            outfile.write('ElectronicAddressIdentifiers=model_.ElectronicAddressIdentifiers(\n')
            self.ElectronicAddressIdentifiers.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Events is not None:
            showIndent(outfile, level)
            outfile.write('Events=model_.Events(\n')
            self.Events.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Identifiers is not None:
            showIndent(outfile, level)
            outfile.write('Identifiers=model_.Identifiers(\n')
            self.Identifiers.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Memberships is not None:
            showIndent(outfile, level)
            outfile.write('Memberships=model_.Memberships(\n')
            self.Memberships.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Relationships is not None:
            showIndent(outfile, level)
            outfile.write('Relationships=model_.Relationships(\n')
            self.Relationships.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Revenues is not None:
            showIndent(outfile, level)
            outfile.write('Revenues=model_.Revenues(\n')
            self.Revenues.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Stocks is not None:
            showIndent(outfile, level)
            outfile.write('Stocks=model_.Stocks(\n')
            self.Stocks.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Vehicles is not None:
            showIndent(outfile, level)
            outfile.write('Vehicles=model_.Vehicles(\n')
            self.Vehicles.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.OrganisationInfo is not None:
            showIndent(outfile, level)
            outfile.write('OrganisationInfo=model_.OrganisationInfo(\n')
            self.OrganisationInfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PersonInfo is not None:
            showIndent(outfile, level)
            outfile.write('PersonInfo=model_.PersonInfo(\n')
            self.PersonInfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.BirthInfo is not None:
            showIndent(outfile, level)
            outfile.write('BirthInfo=model_.BirthInfo(\n')
            self.BirthInfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CountriesOfResidence is not None:
            showIndent(outfile, level)
            outfile.write('CountriesOfResidence=model_.CountriesOfResidence(\n')
            self.CountriesOfResidence.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Favourites is not None:
            showIndent(outfile, level)
            outfile.write('Favourites=model_.Favourites(\n')
            self.Favourites.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Habits is not None:
            showIndent(outfile, level)
            outfile.write('Habits=model_.Habits(\n')
            self.Habits.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Hobbies is not None:
            showIndent(outfile, level)
            outfile.write('Hobbies=model_.Hobbies(\n')
            self.Hobbies.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Languages is not None:
            showIndent(outfile, level)
            outfile.write('Languages=model_.Languages(\n')
            self.Languages.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Nationalities is not None:
            showIndent(outfile, level)
            outfile.write('Nationalities=model_.Nationalities(\n')
            self.Nationalities.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Occupations is not None:
            showIndent(outfile, level)
            outfile.write('Occupations=model_.Occupations(\n')
            self.Occupations.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PhysicalInfo is not None:
            showIndent(outfile, level)
            outfile.write('PhysicalInfo=model_.PhysicalInfo(\n')
            self.PhysicalInfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Preferences is not None:
            showIndent(outfile, level)
            outfile.write('Preferences=model_.Preferences(\n')
            self.Preferences.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Qualifications is not None:
            showIndent(outfile, level)
            outfile.write('Qualifications=model_.Qualifications(\n')
            self.Qualifications.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Visas is not None:
            showIndent(outfile, level)
            outfile.write('Visas=model_.Visas(\n')
            self.Visas.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xpil.PartyType', node)
        if value is not None and 'xpil.PartyType' not in already_processed:
            already_processed.add('xpil.PartyType')
            self.xpil.PartyType = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FreeTextLines':
            obj_ = FreeTextLines.factory()
            obj_.build(child_)
            self.set_FreeTextLines(obj_)
        elif nodeName_ == 'PartyName':
            obj_ = PartyNameType.factory()
            obj_.build(child_)
            self.set_PartyName(obj_)
        elif nodeName_ == 'Addresses':
            obj_ = Addresses.factory()
            obj_.build(child_)
            self.set_Addresses(obj_)
        elif nodeName_ == 'Accounts':
            obj_ = Accounts.factory()
            obj_.build(child_)
            self.set_Accounts(obj_)
        elif nodeName_ == 'ContactNumbers':
            obj_ = ContactNumbers.factory()
            obj_.build(child_)
            self.set_ContactNumbers(obj_)
        elif nodeName_ == 'Documents':
            obj_ = Documents.factory()
            obj_.build(child_)
            self.set_Documents(obj_)
        elif nodeName_ == 'ElectronicAddressIdentifiers':
            obj_ = ElectronicAddressIdentifiers.factory()
            obj_.build(child_)
            self.set_ElectronicAddressIdentifiers(obj_)
        elif nodeName_ == 'Events':
            obj_ = Events.factory()
            obj_.build(child_)
            self.set_Events(obj_)
        elif nodeName_ == 'Identifiers':
            obj_ = Identifiers.factory()
            obj_.build(child_)
            self.set_Identifiers(obj_)
        elif nodeName_ == 'Memberships':
            obj_ = Memberships.factory()
            obj_.build(child_)
            self.set_Memberships(obj_)
        elif nodeName_ == 'Relationships':
            obj_ = Relationships.factory()
            obj_.build(child_)
            self.set_Relationships(obj_)
        elif nodeName_ == 'Revenues':
            obj_ = Revenues.factory()
            obj_.build(child_)
            self.set_Revenues(obj_)
        elif nodeName_ == 'Stocks':
            obj_ = Stocks.factory()
            obj_.build(child_)
            self.set_Stocks(obj_)
        elif nodeName_ == 'Vehicles':
            obj_ = Vehicles.factory()
            obj_.build(child_)
            self.set_Vehicles(obj_)
        elif nodeName_ == 'OrganisationInfo':
            obj_ = OrganisationInfo.factory()
            obj_.build(child_)
            self.set_OrganisationInfo(obj_)
        elif nodeName_ == 'PersonInfo':
            obj_ = PersonInfo.factory()
            obj_.build(child_)
            self.set_PersonInfo(obj_)
        elif nodeName_ == 'BirthInfo':
            obj_ = BirthInfo.factory()
            obj_.build(child_)
            self.set_BirthInfo(obj_)
        elif nodeName_ == 'CountriesOfResidence':
            obj_ = CountriesOfResidence.factory()
            obj_.build(child_)
            self.set_CountriesOfResidence(obj_)
        elif nodeName_ == 'Favourites':
            obj_ = Favourites.factory()
            obj_.build(child_)
            self.set_Favourites(obj_)
        elif nodeName_ == 'Habits':
            obj_ = Habits.factory()
            obj_.build(child_)
            self.set_Habits(obj_)
        elif nodeName_ == 'Hobbies':
            obj_ = Hobbies.factory()
            obj_.build(child_)
            self.set_Hobbies(obj_)
        elif nodeName_ == 'Languages':
            obj_ = Languages.factory()
            obj_.build(child_)
            self.set_Languages(obj_)
        elif nodeName_ == 'Nationalities':
            obj_ = Nationalities.factory()
            obj_.build(child_)
            self.set_Nationalities(obj_)
        elif nodeName_ == 'Occupations':
            obj_ = Occupations.factory()
            obj_.build(child_)
            self.set_Occupations(obj_)
        elif nodeName_ == 'PhysicalInfo':
            obj_ = PhysicalInfo.factory()
            obj_.build(child_)
            self.set_PhysicalInfo(obj_)
        elif nodeName_ == 'Preferences':
            obj_ = Preferences.factory()
            obj_.build(child_)
            self.set_Preferences(obj_)
        elif nodeName_ == 'Qualifications':
            obj_ = Qualifications.factory()
            obj_.build(child_)
            self.set_Qualifications(obj_)
        elif nodeName_ == 'Visas':
            obj_ = Visas.factory()
            obj_.build(child_)
            self.set_Visas(obj_)
# end class STIXCIQIdentity3_0Type

class CIQIdentity3_0InstanceType(stix_common.IdentityType):
    """The CIQIdentity3.0InstanceType provides an extension to the
    IdentityStructureAbstractType which imports and leverages
    version 3.0 of the OASIS CIQ-PIL schema for structured
    characterization of Identities."""
    subclass = None
    superclass = stix_common.IdentityType
    def __init__(self, idref=None, id=None, Name=None, Related_Identities=None, Specification=None, Role=None):
        super(CIQIdentity3_0InstanceType, self).__init__(idref, id, Name, Related_Identities, )
        self.Specification = Specification
        if Role is None:
            self.Role = []
        else:
            self.Role = Role
    def factory(*args_, **kwargs_):
        if CIQIdentity3_0InstanceType.subclass:
            return CIQIdentity3_0InstanceType.subclass(*args_, **kwargs_)
        else:
            return CIQIdentity3_0InstanceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Specification(self): return self.Specification
    def set_Specification(self, Specification): self.Specification = Specification
    def get_Role(self): return self.Role
    def set_Role(self, Role): self.Role = Role
    def add_Role(self, value): self.Role.append(value)
    def insert_Role(self, index, value): self.Role[index] = value
    def hasContent_(self):
        if (
            self.Specification is not None or
            self.Role or
            super(CIQIdentity3_0InstanceType, self).hasContent_()
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CIQIdentity3.0InstanceType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CIQIdentity3.0InstanceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CIQIdentity3.0InstanceType'):
        super(CIQIdentity3_0InstanceType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='CIQIdentity3.0InstanceType')
    def exportChildren(self, outfile, level, namespace_='', name_='CIQIdentity3.0InstanceType', fromsubclass_=False, pretty_print=True):
        super(CIQIdentity3_0InstanceType, self).exportChildren(outfile, level, '', name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Specification is not None:
            self.Specification.export(outfile, level, '', name_='Specification', pretty_print=pretty_print)
        for Role_ in self.Role:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRole>%s</%sRole>%s' % ('', self.gds_format_string(quote_xml(Role_).encode(ExternalEncoding), input_name='Role'), '', eol_))
    def exportLiteral(self, outfile, level, name_='CIQIdentity3.0InstanceType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(CIQIdentity3_0InstanceType, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(CIQIdentity3_0InstanceType, self).exportLiteralChildren(outfile, level, name_)
        if self.Specification is not None:
            outfile.write('Specification=model_.STIXCIQIdentity3_0Type(\n')
            self.Specification.exportLiteral(outfile, level, name_='Specification')
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('Role=[\n')
        level += 1
        for Role_ in self.Role:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(Role_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        super(CIQIdentity3_0InstanceType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Specification':
            obj_ = STIXCIQIdentity3.0Type.factory()
            obj_.build(child_)
            self.set_Specification(obj_)
        elif nodeName_ == 'Role':
            Role_ = child_.text
            Role_ = self.gds_validate_string(Role_, node, 'Role')
            self.Role.append(Role_)
        super(CIQIdentity3_0InstanceType, self).buildChildren(child_, node, nodeName_, True)
# end class CIQIdentity3_0InstanceType

GDSClassesMapping = {
    'Information_Source': stix_common.InformationSourceType,
    'Indicator': stix_common.IndicatorBaseType,
    'Exploit_Target': stix_common.ExploitTargetBaseType,
    'OrganisationDetails': xpil.OrganisationDetailsType,
    'Incident': stix_common.IncidentBaseType,
    'Information_Source_Type': stix_common.ControlledVocabularyStringType,
    'Confidence_Assertion_Chain': stix_common.ConfidenceAssertionChainType,
    'Confidence_Assertion': stix_common.ConfidenceType,
    'Campaign': stix_common.CampaignBaseType,
    'Encoding': stix_common.ControlledVocabularyStringType,
    'Source': stix_common.ControlledVocabularyStringType,
    'State': stix_common.ControlledVocabularyStringType,
    'Type': stix_common.ControlledVocabularyStringType,
    'Tool_Type': stix_common.ControlledVocabularyStringType,
    'TTP': stix_common.TTPBaseType,
    'Course_Of_Action': stix_common.CourseOfActionBaseType,
    'Reference_Description': stix_common.StructuredTextType,
    'Association_Type': stix_common.ControlledVocabularyStringType,
    'Related_Identities': stix_common.RelatedIdentitiesType,
    'Identity': stix_common.IdentityType,
    'Usage_Context_Assumption': stix_common.StructuredTextType,
    'Threat_Actor': stix_common.ThreatActorBaseType,
    'Confidence': stix_common.ConfidenceType,
    'Kill_Chain': stix_common.KillChainType,
    'Party': xpil.PartyType,
    'Description': stix_common.StructuredTextType,
    'Name': stix_common.ControlledVocabularyStringType,
    'Kill_Chain_Phase': stix_common.KillChainPhaseReferenceType,
    'Related_Identity': stix_common.RelatedIdentityType,
    'Argument_Name': stix_common.ControlledVocabularyStringType,
    'Dependency_Description': stix_common.StructuredTextType,
}

USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)

def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass

def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CIQIdentity3.0InstanceType'
        rootClass = CIQIdentity3_0InstanceType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag,
        namespacedef_='',
        pretty_print=True)
    return rootObj

def parseEtree(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CIQIdentity3.0InstanceType'
        rootClass = CIQIdentity3_0InstanceType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    rootElement = rootObj.to_etree(None, name_=rootTag)
    content = etree_.tostring(rootElement, pretty_print=True,
        xml_declaration=True, encoding="utf-8")
    sys.stdout.write(content)
    sys.stdout.write('\n')
    return rootObj, rootElement

def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CIQIdentity3.0InstanceType'
        rootClass = CIQIdentity3_0InstanceType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="CIQIdentity3.0InstanceType",
        namespacedef_='')
    return rootObj

def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CIQIdentity3.0InstanceType'
        rootClass = CIQIdentity3_0InstanceType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from ciq_identity_3.0 import *\n\n')
    sys.stdout.write('from datetime import datetime as datetime_\n\n')
    sys.stdout.write('import ciq_identity_3.0 as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj

def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()

if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

__all__ = [
    "STIXCIQIdentity3_0Type",
    "CIQIdentity3_0InstanceType"
    ]